options {
  IGNORE_CASE = true;
  STATIC = false;
}

PARSER_BEGIN(Gramatica)

package analizadores; 

import java.util.LinkedList;
import java_cup.runtime.*;

import arbol.Acceso;
import arbol.AccesoMatriz;
import arbol.Arbol;
import arbol.Break;
import arbol.Case;
import arbol.Continue;
import arbol.Declaracion;
import arbol.DoWhile;
import arbol.Elseif;
import arbol.For;
import arbol.Function;
import arbol.If;
import arbol.Instruccion;
import arbol.LlamadaFunction;
import arbol.Modificacion;
import arbol.ModificacionMatriz;
import Utilidades.Mensaje;
import Utilidades.Mensaje.tipo_mensaje;
import arbol.Null;
import arbol.Operacion;
import arbol.Operacion.tipo_operacion;
import arbol.OperadorTernario;
import arbol.Print;
import arbol.Return;
import arbol.Switch;
import arbol.While;

public class Gramatica {

    public LinkedList<Instruccion> instrucciones = new LinkedList<Instruccion>();
}
PARSER_END(Gramatica)

/** Lexico */
SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
}

/* COMMENTS */
MORE :
{
  "#" : IN_SINGLE_LINE_COMMENT
|
  <"#*" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "#*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*#" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*#" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* TOKENS */
TOKEN : {
        <NUM: (   ["0"-"9"])+ >
      | <DECIMAL: (["0"-"9"])+"."(["0"-"9"])+>
      | <CADENA: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
      | <RPRINT: "print">
      | <RIF: "if">
      | <RELSE: "else">
      | <RSWITCH: "switch">
      | <RCASE: "case">
      | <RBREAK: "break">
      | <RDEFAULT: "default">
      | <RWHILE: "while">
      | <RCONTINUE: "continue">
      | <RFOR: "for">
      | <RIN: "in">
      | <RDO: "do">
      | <RFUNCTION: "function">
      | <RRETURN: "return">
      | <ASG_FUNC: "=>">
      | <PIZQ: "(">
      | <PDER: ")">
      | <CIZQ: "[">
      | <CDER: "]">
      | <COMA: ",">
      | <LLIZQ: "{">
      | <LLDER: "}">
      | <MAS: "+">
      | <MENOS: "-">
      | <POR: "*">
      | <POTENCIA: "^">
      | <DIV: "/">
      | <MODULO: "%%">
      | <TRUE: "true">
      | <FALSE: "false">
      | <PUNTOCOMA: ";">
      | <NULL: "null">
      | <MAYORQUE: ">">
      | <MENORQUE: "<">
      | <MAYORIGUALQUE: ">=">
      | <MENORIGUALQUE: "<=">
      | <IGUALQUE: "==">
      | <DISTINTOQUE: "!=">
      | <NOT: "!">
      | <AND: "&">
      | <OR: "|">
      | <TERNARIO: "?">
      | <DOSPUNTOS: ":">
      | <ASIG: "=">
      | <IDENTIFICADOR: ["a"-"z","A"-"Z","."] ( ["a"-"z","A"-"Z", "_","."] | ["0"-"9"] )*> 
}
/** Fin Lexico */

//-------------------------------------------Instrucciones globales--------------------------------------------------------//
void start() :
{ 
    Instruccion instr; 
}
{
    (instr = instruccion() {instrucciones.add(instr);} )+ <EOF>
}

Instruccion instruccion() :
{ 
    Instruccion instr; 
}
{
    (
        instr = imprimir()
        |
        instr = ntif()
        |
        instr = ntswitch()
        |
        instr = ntwhile()
        |
        instr = ntdowhile()
        |
        instr = ntfor()
        |
        instr = inst_id()
    )
    {
        return instr;
    }
}

Instruccion inst_id():
{
    String identificador;
    String nombre;
    String nombre_function;
    Instruccion exp = null;
    Instruccion t;
    Instruccion x;
    Instruccion y;
    LinkedList<Declaracion> parametros = new LinkedList<Declaracion>();
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
    LinkedList<Instruccion> valores = new LinkedList<Instruccion>();
    LinkedList<Instruccion> accesos = new LinkedList<Instruccion>();
}
{   
    LOOKAHEAD(5)
    identificador=<IDENTIFICADOR>.image <ASIG> 
    <PIZQ>
    (
        t=declaracion() {parametros.add(((Declaracion)t));} (<COMA>)?
    )*
    <PDER>
    <ASG_FUNC>
    <LLIZQ>
        bloque_instrucciones = instrucciones_locales()
    <LLDER>
    {
        return new Function(identificador,parametros,bloque_instrucciones,token.beginLine,token.beginColumn);
    }

    |
    LOOKAHEAD(3)
    identificador=<IDENTIFICADOR>.image <ASIG> exp=Expresion() (<PUNTOCOMA>)?
    {
        return new Declaracion(identificador, exp, token.beginLine, token.beginColumn);
    }
    
    |
    LOOKAHEAD(5)
    identificador=<IDENTIFICADOR>.image <ASIG> <RFUNCTION> 
    <PIZQ>
    (
        t=declaracion() {parametros.add(((Declaracion)t));} (<COMA>)?
    )*
    <PDER>
    <LLIZQ>
        bloque_instrucciones = instrucciones_locales()
    <LLDER>
    {
        return new Function(identificador,parametros,bloque_instrucciones,token.beginLine,token.beginColumn);
    }
    
    |
    LOOKAHEAD(5)
    identificador=<IDENTIFICADOR>.image
    (
        LOOKAHEAD(2)
        (
            <CIZQ> exp=Expresion() <CDER>
            {accesos.add(new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,true,token.beginLine,token.beginColumn));}
        )
        |
        
        LOOKAHEAD(2)
        (
            <CIZQ><CIZQ> exp=Expresion() <CDER><CDER>
            {accesos.add(new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,false,token.beginLine,token.beginColumn));}
        )
    )+
    <ASIG> exp=Expresion() (<PUNTOCOMA>)?
    {
        return new Modificacion(identificador,accesos,exp,token.beginLine,token.beginColumn);
    }
    
    |
    LOOKAHEAD(5)
    identificador=<IDENTIFICADOR>.image 
    <CIZQ> x=Expresion() <COMA> y=Expresion() <CDER> <ASIG> exp=Expresion() (<PUNTOCOMA>)?
    {
        return new ModificacionMatriz(identificador,x,y,exp,token.beginLine,token.beginColumn);
    }

    |
    LOOKAHEAD(5)
    identificador=<IDENTIFICADOR>.image 
    <CIZQ> x=Expresion() <COMA> <CDER> <ASIG> exp=Expresion() (<PUNTOCOMA>)?
    {
        return new ModificacionMatriz(identificador,x,null,exp,token.beginLine,token.beginColumn);
    }

    |
    LOOKAHEAD(5)
    identificador=<IDENTIFICADOR>.image 
    <CIZQ> <COMA> y=Expresion() <CDER> <ASIG> exp=Expresion() (<PUNTOCOMA>)?
    {
        return new ModificacionMatriz(identificador,null,y,exp,token.beginLine,token.beginColumn);
    }

    |
    LOOKAHEAD(5)
    nombre_function=<IDENTIFICADOR>.image <PIZQ> 
    (
        exp = Expresion() {valores.add(exp);} (<COMA>)?
    )* <PDER> (<PUNTOCOMA>)?
    {
        return new LlamadaFunction(nombre_function,valores,token.beginLine,token.beginColumn);
    }

}

//---------------------------Instrucciones que solo pueden ir en una instruccion de control---------------------------------//

LinkedList<Instruccion> instrucciones_locales():
{
    Instruccion instr;
    LinkedList<Instruccion> ins_locales = new LinkedList<Instruccion>();
}
{
    (instr = instruccion_local() {ins_locales.add(instr);} )+
    {
        return ins_locales;
    }
}

Instruccion instruccion_local():
{ 
    Instruccion instr; 
}
{
    (
        instr = imprimir()
        |
        instr = ntif()
        |
        instr = ntbreak()
        |
        instr = ntswitch()
        |
        instr = ntcontinue()   
        |
        instr = ntwhile()
        |
        instr = ntdowhile()
        |
        instr = ntfor()
        |
        instr = ntreturn()
        |
        instr = inst_id()
    )
    {
        return instr;
    }
}

//---------------------------------------------------Instrucciones-----------------------------------------------------------//
If ntif():
{
    Instruccion exp;
    If Tif; 
    Elseif ifp;
    LinkedList<Elseif> Telseif = new LinkedList<Elseif>();
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
}
{
    <RIF> <PIZQ> exp=Expresion() <PDER> <LLIZQ> bloque_instrucciones=instrucciones_locales() <LLDER> 
    { ifp = new Elseif(exp,bloque_instrucciones,token.beginLine,token.beginColumn);}
    (
        LOOKAHEAD(2) <RELSE> Tif=ntif() 
        {
            Telseif.addAll(Tif.getLista_elseif());
        }
        
        |
        LOOKAHEAD(2) <RELSE> <LLIZQ> bloque_instrucciones=instrucciones_locales() <LLDER>
        {Telseif.addLast(new Elseif(bloque_instrucciones,token.beginLine,token.beginColumn));}
    )?

    {
        Telseif.addFirst(ifp);
        return new If(Telseif);
    }
}

Instruccion declaracion():
{
    String identificador;
    Instruccion exp = null;
}
{
    identificador=<IDENTIFICADOR>.image (<ASIG> exp=Expresion())? (<PUNTOCOMA>)?
    {
        return new Declaracion(identificador, exp, token.beginLine, token.beginColumn);
    }
}

Instruccion ntswitch():
{
    Instruccion exp;
    Instruccion exp_case;
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
    LinkedList<Case> cases = new LinkedList<Case>();
}
{
    <RSWITCH> <PIZQ> {exp = Expresion();} <PDER> 
    <LLIZQ>
    (
        <RCASE> {exp_case=Expresion();} <DOSPUNTOS> 
        {bloque_instrucciones = instrucciones_locales(); cases.add(new Case(exp_case,bloque_instrucciones,token.beginLine,token.beginColumn));}  
    )+
    (
        <RDEFAULT> <DOSPUNTOS> 
        {bloque_instrucciones = instrucciones_locales(); cases.add(new Case(bloque_instrucciones,token.beginLine,token.beginColumn));}  
    )?
    <LLDER>

    {
        return new Switch(exp,cases,token.beginLine,token.beginColumn);
    }
}

Instruccion ntwhile() :
{
    Instruccion exp;
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
}
{
    <RWHILE> <PIZQ> {exp=Expresion();} <PDER> <LLIZQ> {bloque_instrucciones=instrucciones_locales();} <LLDER>

    {
        return new While(exp,bloque_instrucciones,token.beginLine,token.beginColumn);
    }
}

Instruccion ntdowhile() :
{
    Instruccion exp;
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
}
{
    <RDO> <LLIZQ> {bloque_instrucciones=instrucciones_locales();} <LLDER> <RWHILE> <PIZQ> {exp=Expresion();} <PDER> (<PUNTOCOMA>)?

    {
        return new DoWhile(exp,bloque_instrucciones,token.beginLine,token.beginColumn);
    }
}

Instruccion ntfor():
{
    String variable;
    Instruccion exp;
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
}
{
    <RFOR> <PIZQ> variable=<IDENTIFICADOR>.image <RIN> exp=Expresion() <PDER> 
    <LLIZQ> bloque_instrucciones=instrucciones_locales() <LLDER>

    {
        return new For(variable,exp,bloque_instrucciones,token.beginLine,token.beginColumn);
    }
}

Instruccion imprimir() :
{
    Instruccion exp;
}
{
    <RPRINT> <PIZQ> exp = Expresion() <PDER> (<PUNTOCOMA>)?
    {
        return new Print(exp,token.beginLine,token.beginColumn);
    }
}

Instruccion ntbreak():
{
}
{
    <RBREAK> (<PUNTOCOMA>)? {return new Break();}
}

Instruccion ntcontinue():
{
}
{
    <RCONTINUE> (<PUNTOCOMA>)? {return new Continue();}
}

Instruccion ntreturn():
{
    Instruccion exp=null;
}
{   
    LOOKAHEAD(2)
    <RRETURN> <PIZQ> exp=Expresion() <PDER> (<PUNTOCOMA>)?  { return new Return(exp,token.beginLine,token.beginColumn); }
    |
    LOOKAHEAD(2)
    <RRETURN> (<PUNTOCOMA>)?    { return new Return(token.beginLine,token.beginColumn); }
}


//---------------------------------------------------Expresiones-----------------------------------------------------------//
Instruccion Expresion() :
{
    Instruccion cond;
    Instruccion exp_true=null;
    Instruccion exp_false=null;
}
{
    cond = ExpresionOr()
    (
        <TERNARIO> exp_true=ExpresionOr()
        <DOSPUNTOS> exp_false=ExpresionOr()
    )?
    {
        if(exp_true == null && exp_false == null)
            return cond;
        else
            return new OperadorTernario(cond,exp_true,exp_false,token.beginLine,token.beginColumn);
    }
}

Instruccion ExpresionOr() :
{
    Instruccion izq;
    Instruccion der;
}
{
    izq=ExpresionAnd() 
    (
        <OR> der=ExpresionAnd() {izq = new Operacion(tipo_operacion.OR,izq,der,token.beginLine,token.beginColumn);}
    )*
    {
        return izq;
    }
}

Instruccion ExpresionAnd() :
{
    Instruccion izq;
    Instruccion der;
}
{
    izq=ExpresionIgualdad() 
    (
        <AND> der=ExpresionIgualdad() {izq = new Operacion(tipo_operacion.AND,izq,der,token.beginLine,token.beginColumn);}
    )*
    {
        return izq;
    }
}

Instruccion ExpresionIgualdad():
{
    Instruccion izq;
    Instruccion der;
}
{
    izq=ExpresionRelacional() 
    (
        <IGUALQUE> der=ExpresionRelacional() {izq = new Operacion(tipo_operacion.IGUAL_QUE,izq,der,token.beginLine,token.beginColumn);}
        |
        <DISTINTOQUE> der=ExpresionRelacional() {izq = new Operacion(tipo_operacion.DISTINTO_QUE,izq,der,token.beginLine,token.beginColumn);}
    )*
    {
        return izq;
    }
}

Instruccion ExpresionRelacional() :
{
    Instruccion izq;
    Instruccion der;
}
{
    izq=ExpresionAditiva() 
    (
        <MAYORQUE> der=ExpresionAditiva() {izq = new Operacion(tipo_operacion.MAYOR_QUE,izq,der,token.beginLine,token.beginColumn);}
        |
        <MENORQUE> der=ExpresionAditiva() {izq = new Operacion(tipo_operacion.MENOR_QUE,izq,der,token.beginLine,token.beginColumn);}
        |
        <MAYORIGUALQUE> der=ExpresionAditiva() {izq = new Operacion(tipo_operacion.MAYOR_IGUAL_QUE,izq,der,token.beginLine,token.beginColumn);}
        |
        <MENORIGUALQUE> der=ExpresionAditiva() {izq = new Operacion(tipo_operacion.MENOR_IGUAL_QUE,izq,der,token.beginLine,token.beginColumn);}
    )*
    {
        return izq;
    }
}


Instruccion ExpresionAditiva() :
{
    Instruccion izq;
    Instruccion der;
}
{
    izq=ExpresionMultiplicativa()
    (
        
        <MAS> der=ExpresionMultiplicativa() {izq = new Operacion(tipo_operacion.SUMA,izq,der,token.beginLine,token.beginColumn);}
        |
        <MENOS> der=ExpresionMultiplicativa() {izq = new Operacion(tipo_operacion.RESTA,izq,der,token.beginLine,token.beginColumn);}
    )*
    {
        return izq;
    }
}

Instruccion ExpresionMultiplicativa() :
{
    Instruccion izq;
    Instruccion der;
}
{
    izq=ExpresionExponente()
    (
        <POR> der=ExpresionExponente() { izq = new Operacion(tipo_operacion.MULTIPLICACION,izq,der,token.beginLine,token.beginColumn); }
        |
        <DIV> der=ExpresionExponente() { izq = new Operacion(tipo_operacion.DIVISION,izq,der,token.beginLine,token.beginColumn); }
        |
        <MODULO> der=ExpresionExponente() { izq = new Operacion(tipo_operacion.MODULO,izq,der,token.beginLine,token.beginColumn); }
    )*
    {
        return izq;
    }
}

Instruccion ExpresionExponente():
{
    Instruccion izq;
    Instruccion der;
}
{
    izq=ExpresionUnaria()
    (
        <POTENCIA> der=ExpresionUnaria() { izq = new Operacion(tipo_operacion.POTENCIA,izq,der,token.beginLine,token.beginColumn); }
    )*
    {
        return izq;
    }
}

Instruccion ExpresionUnaria() :
{
    Instruccion exp;
}
{
    <MENOS> exp=ExpresionUnaria() {return new Operacion(tipo_operacion.MENOS_UNARIO, exp, token.beginLine, token.beginColumn);}
    |
    <NOT> exp=ExpresionUnaria() {return new Operacion(tipo_operacion.NOT, exp, token.beginLine, token.beginColumn);}
    |
    exp=Primitivo() {return exp;}
}

Instruccion Primitivo() :
{
    Instruccion e;
}
{
     <NUM>  { return new Operacion(Integer.parseInt(token.image),token.beginLine,token.beginColumn); }
     |
     <CADENA> { return new Operacion(token.image.substring(1,token.image.length()-1),token.beginLine,token.beginColumn); }
     |
     <DECIMAL> { return new Operacion(new Double(token.image),token.beginLine,token.beginColumn); }
     |
     <PIZQ> e=Expresion() <PDER> { return e; }
     |
     <TRUE> {return new Operacion(true,token.beginLine,token.beginColumn);}
     |
     <FALSE> {return new Operacion(false,token.beginLine,token.beginColumn);}
     |
     <NULL> {return new Null();}
     |
     e=ExpresionIdentificadores() {return e;}
}

Instruccion ExpresionIdentificadores() :
{
    String identificador;
    Instruccion exp=null;
    LinkedList<Instruccion> valores = new LinkedList<Instruccion>();
    LinkedList<Instruccion> accesos = new LinkedList<Instruccion>();
    Instruccion x;
    Instruccion y;
}
{
    LOOKAHEAD(<CDER>)
    identificador=<IDENTIFICADOR>.image 
    <CIZQ>
    x=Expresion() <COMA> y=Expresion()
    <CDER>
    {
        return new AccesoMatriz(identificador,x,y,token.beginLine,token.beginColumn);
    }
    |
    LOOKAHEAD(<CDER>)
    identificador=<IDENTIFICADOR>.image 
    <CIZQ>
    x=Expresion() <COMA>
    <CDER>
    {
        return new AccesoMatriz(identificador,x,null,token.beginLine,token.beginColumn);
    }
    |
    LOOKAHEAD(<CDER>)
    identificador=<IDENTIFICADOR>.image 
    <CIZQ> <COMA> 
    y=Expresion() 
    <CDER>
    {
        return new AccesoMatriz(identificador,null,y,token.beginLine,token.beginColumn);
    }
    |
    LOOKAHEAD(5)
    identificador=<IDENTIFICADOR>.image <PIZQ> 
    (
        exp = Expresion() {valores.add(exp);} (<COMA>)?
    )* <PDER>
    {
        return new LlamadaFunction(identificador,valores,token.beginLine,token.beginColumn);
    }

    |
    LOOKAHEAD(5)
    identificador=<IDENTIFICADOR>.image
    (
        LOOKAHEAD(2)
        (
            <CIZQ>
            <CIZQ>
            exp=Expresion() 
            <CDER>
            <CDER>
            {accesos.add(new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,false,token.beginLine,token.beginColumn));}
        )

        |
        LOOKAHEAD(1)
        (
            <CIZQ> 
            exp=Expresion() 
            <CDER> 
            {accesos.add(new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,true,token.beginLine,token.beginColumn));}
        )
               
    )+
    {
        return new Acceso(identificador,accesos,token.beginLine,token.beginColumn);
    }

    |
    identificador=<IDENTIFICADOR>.image 
    {
        return new Operacion(tipo_operacion.IDENTIFICADOR,identificador, token.beginLine, token.beginColumn);
    }
    
}