
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;
import arbol.Acceso;
import arbol.AccesoMatriz;
import arbol.Arbol;
import arbol.Break;
import arbol.Case;
import arbol.Continue;
import arbol.Declaracion;
import arbol.Default;
import arbol.DoWhile;
import arbol.Elseif;
import arbol.For;
import arbol.Function;
import arbol.If;
import arbol.Instruccion;
import arbol.LlamadaFunction;
import arbol.Modificacion;
import arbol.ModificacionMatriz;
import Utilidades.Mensaje;
import Utilidades.Mensaje.tipo_mensaje;
import arbol.Null;
import arbol.Operacion;
import arbol.Operacion.tipo_operacion;
import arbol.OperadorTernario;
import arbol.Print;
import arbol.Return;
import arbol.Switch;
import arbol.While;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\005\004\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\010\007\000\002\010\006\000\002\011\005\000" +
    "\002\011\006\000\002\012\011\000\002\013\004\000\002" +
    "\013\003\000\002\014\004\000\002\014\003\000\002\015" +
    "\013\000\002\015\012\000\002\016\013\000\002\017\011" +
    "\000\002\017\015\000\002\017\013\000\002\020\011\000" +
    "\002\020\012\000\002\021\004\000\002\021\003\000\002" +
    "\022\006\000\002\023\005\000\002\024\013\000\002\024" +
    "\012\000\002\024\013\000\002\024\013\000\002\024\012" +
    "\000\002\030\005\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\026\005\000\002\026\005\000\002" +
    "\027\003\000\002\027\005\000\002\025\004\000\002\025" +
    "\003\000\002\025\007\000\002\025\006\000\002\032\007" +
    "\000\002\032\006\000\002\032\005\000\002\032\006\000" +
    "\002\033\005\000\002\033\003\000\002\040\003\000\002" +
    "\040\003\000\002\034\004\000\002\034\003\000\002\035" +
    "\005\000\002\035\007\000\002\036\007\000\002\036\006" +
    "\000\002\037\013\000\002\037\012\000\002\037\012\000" +
    "\002\037\011\000\002\037\012\000\002\037\011\000\002" +
    "\007\004\000\002\007\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\005\000" +
    "\002\007\006\000\002\007\005\000\002\007\007\000\002" +
    "\007\004\000\002\007\003\000\002\007\010\000\002\007" +
    "\007\000\002\007\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\022\003\022\010\023\012\004\015\010\016" +
    "\027\017\006\025\020\061\025\001\002\000\004\030\362" +
    "\001\002\000\024\002\000\003\022\010\023\012\004\015" +
    "\010\016\027\017\006\025\020\061\025\001\002\000\004" +
    "\030\351\001\002\000\024\002\ufff6\003\ufff6\010\ufff6\012" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\025\ufff6\061\ufff6\001\002" +
    "\000\004\030\343\001\002\000\024\002\ufffa\003\ufffa\010" +
    "\ufffa\012\ufffa\015\ufffa\016\ufffa\017\ufffa\025\ufffa\061\ufffa" +
    "\001\002\000\024\002\ufff8\003\ufff8\010\ufff8\012\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\025\ufff8\061\ufff8\001\002\000\024" +
    "\002\ufffd\003\ufffd\010\ufffd\012\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\025\ufffd\061\ufffd\001\002\000\024\002\ufff4\003\ufff4" +
    "\010\ufff4\012\ufff4\015\ufff4\016\ufff4\017\ufff4\025\ufff4\061" +
    "\ufff4\001\002\000\024\002\ufffe\003\ufffe\010\ufffe\012\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\025\ufffe\061\ufffe\001\002\000" +
    "\024\002\ufffc\003\ufffc\010\ufffc\012\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\025\ufffc\061\ufffc\001\002\000\004\002\342\001" +
    "\002\000\004\030\336\001\002\000\024\002\ufff3\003\ufff3" +
    "\010\ufff3\012\ufff3\015\ufff3\016\ufff3\017\ufff3\025\ufff3\061" +
    "\ufff3\001\002\000\004\035\335\001\002\000\004\030\322" +
    "\001\002\000\024\002\ufffb\003\ufffb\010\ufffb\012\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\025\ufffb\061\ufffb\001\002\000\010" +
    "\030\177\032\176\034\247\001\002\000\024\002\ufff7\003" +
    "\ufff7\010\ufff7\012\ufff7\015\ufff7\016\ufff7\017\ufff7\025\ufff7" +
    "\061\ufff7\001\002\000\004\026\032\001\002\000\024\002" +
    "\ufff5\003\ufff5\010\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\025\ufff5\061\ufff5\001\002\000\024\002\ufff9\003\ufff9\010" +
    "\ufff9\012\ufff9\015\ufff9\016\ufff9\017\ufff9\025\ufff9\061\ufff9" +
    "\001\002\000\030\003\047\010\023\012\004\014\045\015" +
    "\010\016\027\017\006\021\033\022\056\025\020\061\052" +
    "\001\002\000\040\003\uffd9\010\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\027\uffd9\035\246\061\uffd9\001\002\000\036\003" +
    "\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\021\uffea\022\uffea\024\uffea\025\uffea\027\uffea\061" +
    "\uffea\001\002\000\036\003\uffe8\010\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\024" +
    "\uffe8\025\uffe8\027\uffe8\061\uffe8\001\002\000\036\003\uffef" +
    "\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\021\uffef\022\uffef\024\uffef\025\uffef\027\uffef\061\uffef" +
    "\001\002\000\036\003\uffec\010\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec\024\uffec" +
    "\025\uffec\027\uffec\061\uffec\001\002\000\036\003\uffeb\010" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\021\uffeb\022\uffeb\024\uffeb\025\uffeb\027\uffeb\061\uffeb\001" +
    "\002\000\036\003\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\024\ufff0\025" +
    "\ufff0\027\ufff0\061\ufff0\001\002\000\036\003\uffe4\010\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021" +
    "\uffe4\022\uffe4\024\uffe4\025\uffe4\027\uffe4\061\uffe4\001\002" +
    "\000\036\003\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\021\uffee\022\uffee\024\uffee\025\uffee" +
    "\027\uffee\061\uffee\001\002\000\032\003\047\010\023\012" +
    "\004\014\045\015\010\016\027\017\006\021\033\022\056" +
    "\025\020\027\240\061\052\001\002\000\040\003\uffdb\010" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\021\uffdb\022\uffdb\024\uffdb\025\uffdb\027\uffdb\035\236\061" +
    "\uffdb\001\002\000\036\003\uffe3\010\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3\022\uffe3\024" +
    "\uffe3\025\uffe3\027\uffe3\061\uffe3\001\002\000\004\035\235" +
    "\001\002\000\036\003\uffe6\010\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\024\uffe6" +
    "\025\uffe6\027\uffe6\061\uffe6\001\002\000\036\003\uffed\010" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\021\uffed\022\uffed\024\uffed\025\uffed\027\uffed\061\uffed\001" +
    "\002\000\010\030\177\032\176\034\200\001\002\000\036" +
    "\003\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\027\uffe7" +
    "\061\uffe7\001\002\000\036\003\uffe5\010\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\025\uffe5\027\uffe5\061\uffe5\001\002\000\036\003" +
    "\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\027\uffe9\061" +
    "\uffe9\001\002\000\042\003\uffbe\010\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\024" +
    "\uffbe\025\uffbe\027\uffbe\030\057\035\060\061\uffbe\001\002" +
    "\000\026\004\061\005\066\006\065\007\072\030\063\037" +
    "\064\054\071\061\073\062\067\063\062\001\002\000\036" +
    "\003\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\021\uffbf\022\uffbf\024\uffbf\025\uffbf\027\uffbf" +
    "\061\uffbf\001\002\000\112\002\uff95\003\uff95\010\uff95\012" +
    "\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\021\uff95" +
    "\022\uff95\024\uff95\025\uff95\027\uff95\031\uff95\033\uff95\034" +
    "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\055\uff95\056\uff95\057\uff95\061\uff95" +
    "\001\002\000\112\002\uff96\003\uff96\010\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\021\uff96\022\uff96" +
    "\024\uff96\025\uff96\027\uff96\031\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\055\uff96\056\uff96\057\uff96\061\uff96\001\002" +
    "\000\026\004\061\005\066\006\065\007\072\030\063\037" +
    "\064\054\071\061\073\062\067\063\062\001\002\000\026" +
    "\004\061\005\066\006\065\007\072\030\063\037\064\054" +
    "\071\061\073\062\067\063\062\001\002\000\112\002\uff94" +
    "\003\uff94\010\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016" +
    "\uff94\017\uff94\021\uff94\022\uff94\024\uff94\025\uff94\027\uff94" +
    "\031\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\055\uff94\056" +
    "\uff94\057\uff94\061\uff94\001\002\000\112\002\uff8c\003\uff8c" +
    "\010\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017" +
    "\uff8c\021\uff8c\022\uff8c\024\uff8c\025\uff8c\027\uff8c\031\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\053\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\061\uff8c\001\002\000\112\002\uff97\003\uff97\010\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\021" +
    "\uff97\022\uff97\024\uff97\025\uff97\027\uff97\031\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97" +
    "\051\uff97\052\uff97\053\uff97\055\uff97\056\uff97\057\uff97\061" +
    "\uff97\001\002\000\042\031\171\036\113\037\105\040\111" +
    "\041\120\042\106\043\117\044\123\045\114\046\110\047" +
    "\112\050\107\051\115\052\104\053\122\055\116\001\002" +
    "\000\026\004\061\005\066\006\065\007\072\030\063\037" +
    "\064\054\071\061\073\062\067\063\062\001\002\000\112" +
    "\002\uff93\003\uff93\010\uff93\012\uff93\013\uff93\014\uff93\015" +
    "\uff93\016\uff93\017\uff93\021\uff93\022\uff93\024\uff93\025\uff93" +
    "\027\uff93\031\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\055" +
    "\uff93\056\uff93\057\uff93\061\uff93\001\002\000\116\002\uff92" +
    "\003\uff92\010\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\021\uff92\022\uff92\024\uff92\025\uff92\027\uff92" +
    "\030\076\031\uff92\032\074\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053" +
    "\uff92\055\uff92\056\uff92\057\uff92\061\uff92\001\002\000\032" +
    "\004\061\005\066\006\065\007\072\030\063\032\102\037" +
    "\064\054\071\057\160\061\073\062\067\063\062\001\002" +
    "\000\114\002\uffb2\003\uffb2\010\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\024\uffb2" +
    "\025\uffb2\027\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\061\uffb2\001\002" +
    "\000\032\004\061\005\066\006\065\007\072\024\154\030" +
    "\063\031\151\037\064\054\071\061\073\062\067\063\062" +
    "\001\002\000\114\002\uff8d\003\uff8d\010\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\021\uff8d\022\uff8d" +
    "\024\uff8d\025\uff8d\027\uff8d\031\uff8d\032\100\033\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d\061\uff8d" +
    "\001\002\000\030\004\061\005\066\006\065\007\072\030" +
    "\063\032\102\037\064\054\071\061\073\062\067\063\062" +
    "\001\002\000\114\002\uffb3\003\uffb3\010\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3" +
    "\024\uffb3\025\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3\061\uffb3" +
    "\001\002\000\026\004\061\005\066\006\065\007\072\030" +
    "\063\037\064\054\071\061\073\062\067\063\062\001\002" +
    "\000\042\033\121\036\113\037\105\040\111\041\120\042" +
    "\106\043\117\044\123\045\114\046\110\047\112\050\107" +
    "\051\115\052\104\053\122\055\116\001\002\000\026\004" +
    "\061\005\066\006\065\007\072\030\063\037\064\054\071" +
    "\061\073\062\067\063\062\001\002\000\026\004\061\005" +
    "\066\006\065\007\072\030\063\037\064\054\071\061\073" +
    "\062\067\063\062\001\002\000\026\004\061\005\066\006" +
    "\065\007\072\030\063\037\064\054\071\061\073\062\067" +
    "\063\062\001\002\000\026\004\061\005\066\006\065\007" +
    "\072\030\063\037\064\054\071\061\073\062\067\063\062" +
    "\001\002\000\026\004\061\005\066\006\065\007\072\030" +
    "\063\037\064\054\071\061\073\062\067\063\062\001\002" +
    "\000\026\004\061\005\066\006\065\007\072\030\063\037" +
    "\064\054\071\061\073\062\067\063\062\001\002\000\026" +
    "\004\061\005\066\006\065\007\072\030\063\037\064\054" +
    "\071\061\073\062\067\063\062\001\002\000\026\004\061" +
    "\005\066\006\065\007\072\030\063\037\064\054\071\061" +
    "\073\062\067\063\062\001\002\000\026\004\061\005\066" +
    "\006\065\007\072\030\063\037\064\054\071\061\073\062" +
    "\067\063\062\001\002\000\026\004\061\005\066\006\065" +
    "\007\072\030\063\037\064\054\071\061\073\062\067\063" +
    "\062\001\002\000\026\004\061\005\066\006\065\007\072" +
    "\030\063\037\064\054\071\061\073\062\067\063\062\001" +
    "\002\000\026\004\061\005\066\006\065\007\072\030\063" +
    "\037\064\054\071\061\073\062\067\063\062\001\002\000" +
    "\026\004\061\005\066\006\065\007\072\030\063\037\064" +
    "\054\071\061\073\062\067\063\062\001\002\000\114\002" +
    "\uffb1\003\uffb1\010\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\027" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\061\uffb1\001\002\000\026\004" +
    "\061\005\066\006\065\007\072\030\063\037\064\054\071" +
    "\061\073\062\067\063\062\001\002\000\026\004\061\005" +
    "\066\006\065\007\072\030\063\037\064\054\071\061\073" +
    "\062\067\063\062\001\002\000\112\002\uff9b\003\uff9b\010" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\021\uff9b\022\uff9b\024\uff9b\025\uff9b\027\uff9b\031\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\036\113\037\105\040\111\041\120" +
    "\042\106\043\117\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\061\uff9b\001\002\000\112\002\uff99\003\uff99\010\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\021\uff99" +
    "\022\uff99\024\uff99\025\uff99\027\uff99\031\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\113\037\105\040\111\041\120\042\106" +
    "\043\117\044\123\045\114\046\110\047\112\050\107\051" +
    "\115\052\104\053\uff99\055\uff99\056\uff99\057\uff99\061\uff99" +
    "\001\002\000\112\002\uffa2\003\uffa2\010\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2" +
    "\024\uffa2\025\uffa2\027\uffa2\031\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\106\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2\061\uffa2\001\002" +
    "\000\112\002\uffa0\003\uffa0\010\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\024\uffa0" +
    "\025\uffa0\027\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\042\106\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\061\uffa0\001\002\000\042" +
    "\036\113\037\105\040\111\041\120\042\106\043\117\044" +
    "\123\045\114\046\110\047\112\050\107\051\115\052\104" +
    "\053\122\055\116\056\131\001\002\000\026\004\061\005" +
    "\066\006\065\007\072\030\063\037\064\054\071\061\073" +
    "\062\067\063\062\001\002\000\112\002\uff8e\003\uff8e\010" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\021\uff8e\022\uff8e\024\uff8e\025\uff8e\027\uff8e\031\uff8e\033" +
    "\uff8e\034\uff8e\035\uff8e\036\113\037\105\040\111\041\120" +
    "\042\106\043\117\044\123\045\114\046\110\047\112\050" +
    "\107\051\115\052\104\053\122\055\116\056\uff8e\057\uff8e" +
    "\061\uff8e\001\002\000\112\002\uff9d\003\uff9d\010\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\021\uff9d" +
    "\022\uff9d\024\uff9d\025\uff9d\027\uff9d\031\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\113\037\105\040\111\041\120\042\106" +
    "\043\117\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d\061\uff9d" +
    "\001\002\000\112\002\uff9a\003\uff9a\010\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a" +
    "\024\uff9a\025\uff9a\027\uff9a\031\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\113\037\105\040\111\041\120\042\106\043\117" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\055\uff9a\056\uff9a\057\uff9a\061\uff9a\001\002" +
    "\000\112\002\uffa5\003\uffa5\010\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5\024\uffa5" +
    "\025\uffa5\027\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\040\111\041\120\042\106\043\117\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\055\uffa5\056\uffa5\057\uffa5\061\uffa5\001\002\000\112" +
    "\002\uff9e\003\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\021\uff9e\022\uff9e\024\uff9e\025\uff9e" +
    "\027\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\036\113\037" +
    "\105\040\111\041\120\042\106\043\117\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\061\uff9e\001\002\000\112\002\uffa3" +
    "\003\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\021\uffa3\022\uffa3\024\uffa3\025\uffa3\027\uffa3" +
    "\031\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\042\106\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\055\uffa3\056" +
    "\uffa3\057\uffa3\061\uffa3\001\002\000\112\002\uff9f\003\uff9f" +
    "\010\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\021\uff9f\022\uff9f\024\uff9f\025\uff9f\027\uff9f\031\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\113\037\105\040\111\041" +
    "\120\042\106\043\117\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\061\uff9f\001\002\000\112\002\uff9c\003\uff9c\010\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\021" +
    "\uff9c\022\uff9c\024\uff9c\025\uff9c\027\uff9c\031\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\113\037\105\040\111\041\120\042" +
    "\106\043\117\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\057\uff9c\061" +
    "\uff9c\001\002\000\112\002\uffa1\003\uffa1\010\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\021\uffa1\022" +
    "\uffa1\024\uffa1\025\uffa1\027\uffa1\031\uffa1\033\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1\061\uffa1\001" +
    "\002\000\112\002\uffa4\003\uffa4\010\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4\022\uffa4\024" +
    "\uffa4\025\uffa4\027\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\111\041\120\042\106\043\117\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\055\uffa4\056\uffa4\057\uffa4\061\uffa4\001\002\000" +
    "\112\002\uff98\003\uff98\010\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\021\uff98\022\uff98\024\uff98\025" +
    "\uff98\027\uff98\031\uff98\033\uff98\034\uff98\035\uff98\036\113" +
    "\037\105\040\111\041\120\042\106\043\117\044\123\045" +
    "\114\046\110\047\112\050\107\051\115\052\uff98\053\uff98" +
    "\055\uff98\056\uff98\057\uff98\061\uff98\001\002\000\042\033" +
    "\146\036\113\037\105\040\111\041\120\042\106\043\117" +
    "\044\123\045\114\046\110\047\112\050\107\051\115\052" +
    "\104\053\122\055\116\001\002\000\004\033\147\001\002" +
    "\000\114\002\uffb0\003\uffb0\010\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0\024\uffb0" +
    "\025\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0\061\uffb0\001\002" +
    "\000\006\031\uffb6\057\uffb6\001\002\000\112\002\uff8f\003" +
    "\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\021\uff8f\022\uff8f\024\uff8f\025\uff8f\027\uff8f\031" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\055\uff8f\056\uff8f" +
    "\057\uff8f\061\uff8f\001\002\000\006\031\156\057\155\001" +
    "\002\000\044\031\uffb5\036\113\037\105\040\111\041\120" +
    "\042\106\043\117\044\123\045\114\046\110\047\112\050" +
    "\107\051\115\052\104\053\122\055\116\057\uffb5\001\002" +
    "\000\006\031\uffb4\057\uffb4\001\002\000\030\004\061\005" +
    "\066\006\065\007\072\024\154\030\063\037\064\054\071" +
    "\061\073\062\067\063\062\001\002\000\112\002\uff90\003" +
    "\uff90\010\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\021\uff90\022\uff90\024\uff90\025\uff90\027\uff90\031" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047" +
    "\uff90\050\uff90\051\uff90\052\uff90\053\uff90\055\uff90\056\uff90" +
    "\057\uff90\061\uff90\001\002\000\006\031\uffb7\057\uffb7\001" +
    "\002\000\026\004\061\005\066\006\065\007\072\030\063" +
    "\037\064\054\071\061\073\062\067\063\062\001\002\000" +
    "\044\033\121\036\113\037\105\040\111\041\120\042\106" +
    "\043\117\044\123\045\114\046\110\047\112\050\107\051" +
    "\115\052\104\053\122\055\116\057\162\001\002\000\030" +
    "\004\061\005\066\006\065\007\072\030\063\033\164\037" +
    "\064\054\071\061\073\062\067\063\062\001\002\000\042" +
    "\033\165\036\113\037\105\040\111\041\120\042\106\043" +
    "\117\044\123\045\114\046\110\047\112\050\107\051\115" +
    "\052\104\053\122\055\116\001\002\000\112\002\uff8a\003" +
    "\uff8a\010\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\017\uff8a\021\uff8a\022\uff8a\024\uff8a\025\uff8a\027\uff8a\031" +
    "\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\055\uff8a\056\uff8a" +
    "\057\uff8a\061\uff8a\001\002\000\112\002\uff8b\003\uff8b\010" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b" +
    "\021\uff8b\022\uff8b\024\uff8b\025\uff8b\027\uff8b\031\uff8b\033" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\052\uff8b\053\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\061\uff8b\001\002\000\042\033\167\036\113\037\105\040" +
    "\111\041\120\042\106\043\117\044\123\045\114\046\110" +
    "\047\112\050\107\051\115\052\104\053\122\055\116\001" +
    "\002\000\112\002\uff89\003\uff89\010\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\021\uff89\022\uff89\024" +
    "\uff89\025\uff89\027\uff89\031\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\053\uff89\055\uff89\056\uff89\057\uff89\061\uff89\001\002\000" +
    "\112\002\uffa6\003\uffa6\010\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\024\uffa6\025" +
    "\uffa6\027\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\055\uffa6\056\uffa6\057\uffa6\061\uffa6\001\002\000\040\003" +
    "\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc\027\uffbc\035" +
    "\172\061\uffbc\001\002\000\036\003\uffbd\010\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\022" +
    "\uffbd\024\uffbd\025\uffbd\027\uffbd\061\uffbd\001\002\000\112" +
    "\002\uffa7\003\uffa7\010\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7" +
    "\027\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\061\uffa7\001\002\000\042\031\175" +
    "\036\113\037\105\040\111\041\120\042\106\043\117\044" +
    "\123\045\114\046\110\047\112\050\107\051\115\052\104" +
    "\053\122\055\116\001\002\000\112\002\uff91\003\uff91\010" +
    "\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91" +
    "\021\uff91\022\uff91\024\uff91\025\uff91\027\uff91\031\uff91\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\055\uff91\056\uff91\057\uff91" +
    "\061\uff91\001\002\000\032\004\061\005\066\006\065\007" +
    "\072\030\063\032\102\037\064\054\071\057\214\061\073" +
    "\062\067\063\062\001\002\000\032\004\061\005\066\006" +
    "\065\007\072\024\154\030\063\031\207\037\064\054\071" +
    "\061\073\062\067\063\062\001\002\000\026\004\061\005" +
    "\066\006\065\007\072\030\063\037\064\054\071\061\073" +
    "\062\067\063\062\001\002\000\006\032\100\034\202\001" +
    "\002\000\026\004\061\005\066\006\065\007\072\030\063" +
    "\037\064\054\071\061\073\062\067\063\062\001\002\000" +
    "\100\002\uffae\003\uffae\010\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\024\uffae\025" +
    "\uffae\027\uffae\035\204\036\113\037\105\040\111\041\120" +
    "\042\106\043\117\044\123\045\114\046\110\047\112\050" +
    "\107\051\115\052\104\053\122\055\116\061\uffae\001\002" +
    "\000\040\002\uffaf\003\uffaf\010\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\024\uffaf" +
    "\025\uffaf\027\uffaf\061\uffaf\001\002\000\104\002\uffdf\003" +
    "\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\027\uffdf\031" +
    "\uffdf\035\206\036\113\037\105\040\111\041\120\042\106" +
    "\043\117\044\123\045\114\046\110\047\112\050\107\051" +
    "\115\052\104\053\122\055\116\057\uffdf\061\uffdf\001\002" +
    "\000\044\002\uffde\003\uffde\010\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\024\uffde" +
    "\025\uffde\027\uffde\031\uffde\057\uffde\061\uffde\001\002\000" +
    "\042\002\uffb9\003\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\024\uffb9\025" +
    "\uffb9\027\uffb9\035\213\061\uffb9\001\002\000\006\031\211" +
    "\057\155\001\002\000\042\002\uffba\003\uffba\010\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\021\uffba" +
    "\022\uffba\024\uffba\025\uffba\027\uffba\035\212\061\uffba\001" +
    "\002\000\040\002\uffbb\003\uffbb\010\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb\022\uffbb\024" +
    "\uffbb\025\uffbb\027\uffbb\061\uffbb\001\002\000\040\002\uffb8" +
    "\003\uffb8\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8\027\uffb8" +
    "\061\uffb8\001\002\000\026\004\061\005\066\006\065\007" +
    "\072\030\063\037\064\054\071\061\073\062\067\063\062" +
    "\001\002\000\044\033\121\036\113\037\105\040\111\041" +
    "\120\042\106\043\117\044\123\045\114\046\110\047\112" +
    "\050\107\051\115\052\104\053\122\055\116\057\216\001" +
    "\002\000\030\004\061\005\066\006\065\007\072\030\063" +
    "\033\220\037\064\054\071\061\073\062\067\063\062\001" +
    "\002\000\042\033\224\036\113\037\105\040\111\041\120" +
    "\042\106\043\117\044\123\045\114\046\110\047\112\050" +
    "\107\051\115\052\104\053\122\055\116\001\002\000\004" +
    "\034\221\001\002\000\026\004\061\005\066\006\065\007" +
    "\072\030\063\037\064\054\071\061\073\062\067\063\062" +
    "\001\002\000\100\002\uffaa\003\uffaa\010\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa" +
    "\024\uffaa\025\uffaa\027\uffaa\035\223\036\113\037\105\040" +
    "\111\041\120\042\106\043\117\044\123\045\114\046\110" +
    "\047\112\050\107\051\115\052\104\053\122\055\116\061" +
    "\uffaa\001\002\000\040\002\uffab\003\uffab\010\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\021\uffab\022" +
    "\uffab\024\uffab\025\uffab\027\uffab\061\uffab\001\002\000\004" +
    "\034\225\001\002\000\026\004\061\005\066\006\065\007" +
    "\072\030\063\037\064\054\071\061\073\062\067\063\062" +
    "\001\002\000\100\002\uffac\003\uffac\010\uffac\012\uffac\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\uffac\021\uffac\022\uffac" +
    "\024\uffac\025\uffac\027\uffac\035\227\036\113\037\105\040" +
    "\111\041\120\042\106\043\117\044\123\045\114\046\110" +
    "\047\112\050\107\051\115\052\104\053\122\055\116\061" +
    "\uffac\001\002\000\040\002\uffad\003\uffad\010\uffad\012\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\021\uffad\022" +
    "\uffad\024\uffad\025\uffad\027\uffad\061\uffad\001\002\000\042" +
    "\033\231\036\113\037\105\040\111\041\120\042\106\043" +
    "\117\044\123\045\114\046\110\047\112\050\107\051\115" +
    "\052\104\053\122\055\116\001\002\000\004\034\232\001" +
    "\002\000\026\004\061\005\066\006\065\007\072\030\063" +
    "\037\064\054\071\061\073\062\067\063\062\001\002\000" +
    "\100\002\uffa8\003\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\024\uffa8\025" +
    "\uffa8\027\uffa8\035\234\036\113\037\105\040\111\041\120" +
    "\042\106\043\117\044\123\045\114\046\110\047\112\050" +
    "\107\051\115\052\104\053\122\055\116\061\uffa8\001\002" +
    "\000\040\002\uffa9\003\uffa9\010\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\024\uffa9" +
    "\025\uffa9\027\uffa9\061\uffa9\001\002\000\036\003\uffe2\010" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\021\uffe2\022\uffe2\024\uffe2\025\uffe2\027\uffe2\061\uffe2\001" +
    "\002\000\036\003\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\024\uffdc\025" +
    "\uffdc\027\uffdc\061\uffdc\001\002\000\036\003\ufff1\010\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021" +
    "\ufff1\022\ufff1\024\ufff1\025\ufff1\027\ufff1\061\ufff1\001\002" +
    "\000\004\015\241\001\002\000\004\030\242\001\002\000" +
    "\026\004\061\005\066\006\065\007\072\030\063\037\064" +
    "\054\071\061\073\062\067\063\062\001\002\000\042\031" +
    "\244\036\113\037\105\040\111\041\120\042\106\043\117" +
    "\044\123\045\114\046\110\047\112\050\107\051\115\052" +
    "\104\053\122\055\116\001\002\000\042\002\uffd7\003\uffd7" +
    "\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\027\uffd7\035\245" +
    "\061\uffd7\001\002\000\040\002\uffd8\003\uffd8\010\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8" +
    "\022\uffd8\024\uffd8\025\uffd8\027\uffd8\061\uffd8\001\002\000" +
    "\036\003\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\021\uffda\022\uffda\024\uffda\025\uffda\027" +
    "\uffda\061\uffda\001\002\000\030\004\061\005\066\006\065" +
    "\007\072\023\250\030\251\037\064\054\071\061\073\062" +
    "\067\063\062\001\002\000\004\030\303\001\002\000\030" +
    "\004\061\005\066\006\065\007\072\030\063\031\252\037" +
    "\064\054\071\061\073\062\067\063\062\001\002\000\004" +
    "\060\277\001\002\000\004\057\275\001\002\000\046\031" +
    "\270\034\266\036\113\037\105\040\111\041\120\042\106" +
    "\043\117\044\123\045\114\046\110\047\112\050\107\051" +
    "\115\052\104\053\122\055\116\057\uffc1\001\002\000\006" +
    "\031\257\057\256\001\002\000\026\004\061\005\066\006" +
    "\065\007\072\030\063\037\064\054\071\061\073\062\067" +
    "\063\062\001\002\000\004\060\260\001\002\000\004\026" +
    "\261\001\002\000\030\003\047\010\023\012\004\014\045" +
    "\015\010\016\027\017\006\021\033\022\056\025\020\061" +
    "\052\001\002\000\032\003\047\010\023\012\004\014\045" +
    "\015\010\016\027\017\006\021\033\022\056\025\020\027" +
    "\263\061\052\001\002\000\024\002\uffca\003\uffca\010\uffca" +
    "\012\uffca\015\uffca\016\uffca\017\uffca\025\uffca\061\uffca\001" +
    "\002\000\006\031\uffc3\057\uffc3\001\002\000\046\031\uffc1" +
    "\034\266\036\113\037\105\040\111\041\120\042\106\043" +
    "\117\044\123\045\114\046\110\047\112\050\107\051\115" +
    "\052\104\053\122\055\116\057\uffc1\001\002\000\026\004" +
    "\061\005\066\006\065\007\072\030\063\037\064\054\071" +
    "\061\073\062\067\063\062\001\002\000\044\031\uffc0\036" +
    "\113\037\105\040\111\041\120\042\106\043\117\044\123" +
    "\045\114\046\110\047\112\050\107\051\115\052\104\053" +
    "\122\055\116\057\uffc0\001\002\000\066\002\uff91\003\uff91" +
    "\010\uff91\012\uff91\015\uff91\016\uff91\017\uff91\025\uff91\035" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\055\uff91\060\271\061\uff91\001\002\000\004" +
    "\026\272\001\002\000\030\003\047\010\023\012\004\014" +
    "\045\015\010\016\027\017\006\021\033\022\056\025\020" +
    "\061\052\001\002\000\032\003\047\010\023\012\004\014" +
    "\045\015\010\016\027\017\006\021\033\022\056\025\020" +
    "\027\274\061\052\001\002\000\024\002\uffc9\003\uffc9\010" +
    "\uffc9\012\uffc9\015\uffc9\016\uffc9\017\uffc9\025\uffc9\061\uffc9" +
    "\001\002\000\026\004\061\005\066\006\065\007\072\030" +
    "\063\037\064\054\071\061\073\062\067\063\062\001\002" +
    "\000\006\031\uffc2\057\uffc2\001\002\000\004\026\300\001" +
    "\002\000\030\003\047\010\023\012\004\014\045\015\010" +
    "\016\027\017\006\021\033\022\056\025\020\061\052\001" +
    "\002\000\032\003\047\010\023\012\004\014\045\015\010" +
    "\016\027\017\006\021\033\022\056\025\020\027\302\061" +
    "\052\001\002\000\024\002\uffc8\003\uffc8\010\uffc8\012\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\025\uffc8\061\uffc8\001\002\000" +
    "\006\031\306\061\305\001\002\000\006\031\uffc6\057\uffc6" +
    "\001\002\000\010\031\uffc5\034\200\057\uffc5\001\002\000" +
    "\004\026\317\001\002\000\006\031\uffc4\057\uffc4\001\002" +
    "\000\006\031\312\057\311\001\002\000\004\061\305\001" +
    "\002\000\004\026\313\001\002\000\030\003\047\010\023" +
    "\012\004\014\045\015\010\016\027\017\006\021\033\022" +
    "\056\025\020\061\052\001\002\000\032\003\047\010\023" +
    "\012\004\014\045\015\010\016\027\017\006\021\033\022" +
    "\056\025\020\027\315\061\052\001\002\000\024\002\uffcc" +
    "\003\uffcc\010\uffcc\012\uffcc\015\uffcc\016\uffcc\017\uffcc\025" +
    "\uffcc\061\uffcc\001\002\000\006\031\uffc7\057\uffc7\001\002" +
    "\000\030\003\047\010\023\012\004\014\045\015\010\016" +
    "\027\017\006\021\033\022\056\025\020\061\052\001\002" +
    "\000\032\003\047\010\023\012\004\014\045\015\010\016" +
    "\027\017\006\021\033\022\056\025\020\027\321\061\052" +
    "\001\002\000\024\002\uffcb\003\uffcb\010\uffcb\012\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\025\uffcb\061\uffcb\001\002\000\026" +
    "\004\061\005\066\006\065\007\072\030\063\037\064\054" +
    "\071\061\073\062\067\063\062\001\002\000\042\031\324" +
    "\036\113\037\105\040\111\041\120\042\106\043\117\044" +
    "\123\045\114\046\110\047\112\050\107\051\115\052\104" +
    "\053\122\055\116\001\002\000\004\026\325\001\002\000" +
    "\030\003\047\010\023\012\004\014\045\015\010\016\027" +
    "\017\006\021\033\022\056\025\020\061\052\001\002\000" +
    "\032\003\047\010\023\012\004\014\045\015\010\016\027" +
    "\017\006\021\033\022\056\025\020\027\327\061\052\001" +
    "\002\000\042\002\uffd5\003\uffd5\010\uffd5\011\330\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022" +
    "\uffd5\024\uffd5\025\uffd5\027\uffd5\061\uffd5\001\002\000\006" +
    "\010\023\026\331\001\002\000\030\003\047\010\023\012" +
    "\004\014\045\015\010\016\027\017\006\021\033\022\056" +
    "\025\020\061\052\001\002\000\040\002\uffd3\003\uffd3\010" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\021\uffd3\022\uffd3\024\uffd3\025\uffd3\027\uffd3\061\uffd3\001" +
    "\002\000\032\003\047\010\023\012\004\014\045\015\010" +
    "\016\027\017\006\021\033\022\056\025\020\027\334\061" +
    "\052\001\002\000\040\002\uffd4\003\uffd4\010\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022" +
    "\uffd4\024\uffd4\025\uffd4\027\uffd4\061\uffd4\001\002\000\024" +
    "\002\ufff2\003\ufff2\010\ufff2\012\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\025\ufff2\061\ufff2\001\002\000\026\004\061\005\066" +
    "\006\065\007\072\030\063\037\064\054\071\061\073\062" +
    "\067\063\062\001\002\000\042\031\340\036\113\037\105" +
    "\040\111\041\120\042\106\043\117\044\123\045\114\046" +
    "\110\047\112\050\107\051\115\052\104\053\122\055\116" +
    "\001\002\000\042\002\uffe0\003\uffe0\010\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\035\341\061\uffe0\001\002\000" +
    "\040\002\uffe1\003\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\024\uffe1\025" +
    "\uffe1\027\uffe1\061\uffe1\001\002\000\004\002\001\001\002" +
    "\000\026\004\061\005\066\006\065\007\072\030\063\037" +
    "\064\054\071\061\073\062\067\063\062\001\002\000\042" +
    "\031\345\036\113\037\105\040\111\041\120\042\106\043" +
    "\117\044\123\045\114\046\110\047\112\050\107\051\115" +
    "\052\104\053\122\055\116\001\002\000\004\026\346\001" +
    "\002\000\030\003\047\010\023\012\004\014\045\015\010" +
    "\016\027\017\006\021\033\022\056\025\020\061\052\001" +
    "\002\000\032\003\047\010\023\012\004\014\045\015\010" +
    "\016\027\017\006\021\033\022\056\025\020\027\350\061" +
    "\052\001\002\000\040\002\uffdd\003\uffdd\010\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022" +
    "\uffdd\024\uffdd\025\uffdd\027\uffdd\061\uffdd\001\002\000\004" +
    "\061\352\001\002\000\004\020\353\001\002\000\026\004" +
    "\061\005\066\006\065\007\072\030\063\037\064\054\071" +
    "\061\073\062\067\063\062\001\002\000\042\031\355\036" +
    "\113\037\105\040\111\041\120\042\106\043\117\044\123" +
    "\045\114\046\110\047\112\050\107\051\115\052\104\053" +
    "\122\055\116\001\002\000\004\026\356\001\002\000\030" +
    "\003\047\010\023\012\004\014\045\015\010\016\027\017" +
    "\006\021\033\022\056\025\020\061\052\001\002\000\032" +
    "\003\047\010\023\012\004\014\045\015\010\016\027\017" +
    "\006\021\033\022\056\025\020\027\360\061\052\001\002" +
    "\000\040\002\uffd6\003\uffd6\010\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\024\uffd6" +
    "\025\uffd6\027\uffd6\061\uffd6\001\002\000\024\002\uffff\003" +
    "\uffff\010\uffff\012\uffff\015\uffff\016\uffff\017\uffff\025\uffff" +
    "\061\uffff\001\002\000\026\004\061\005\066\006\065\007" +
    "\072\030\063\037\064\054\071\061\073\062\067\063\062" +
    "\001\002\000\042\031\364\036\113\037\105\040\111\041" +
    "\120\042\106\043\117\044\123\045\114\046\110\047\112" +
    "\050\107\051\115\052\104\053\122\055\116\001\002\000" +
    "\004\026\365\001\002\000\004\013\366\001\002\000\026" +
    "\004\061\005\066\006\065\007\072\030\063\037\064\054" +
    "\071\061\073\062\067\063\062\001\002\000\010\013\366" +
    "\024\372\027\371\001\002\000\010\013\uffcf\024\uffcf\027" +
    "\uffcf\001\002\000\040\002\uffd2\003\uffd2\010\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022" +
    "\uffd2\024\uffd2\025\uffd2\027\uffd2\061\uffd2\001\002\000\004" +
    "\056\376\001\002\000\004\027\375\001\002\000\010\013" +
    "\uffd0\024\uffd0\027\uffd0\001\002\000\040\002\uffd1\003\uffd1" +
    "\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\021\uffd1\022\uffd1\024\uffd1\025\uffd1\027\uffd1\061\uffd1" +
    "\001\002\000\030\003\047\010\023\012\004\014\045\015" +
    "\010\016\027\017\006\021\033\022\056\025\020\061\052" +
    "\001\002\000\032\003\047\010\023\012\004\014\045\015" +
    "\010\016\027\017\006\021\033\022\056\025\020\027\uffcd" +
    "\061\052\001\002\000\042\036\113\037\105\040\111\041" +
    "\120\042\106\043\117\044\123\045\114\046\110\047\112" +
    "\050\107\051\115\052\104\053\122\055\116\056\u0101\001" +
    "\002\000\030\003\047\010\023\012\004\014\045\015\010" +
    "\016\027\017\006\021\033\022\056\025\020\061\052\001" +
    "\002\000\036\003\047\010\023\012\004\013\uffce\014\045" +
    "\015\010\016\027\017\006\021\033\022\056\024\uffce\025" +
    "\020\027\uffce\061\052\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\036\002\016\003\004\004\014\010\012\011" +
    "\015\012\023\015\010\016\030\017\011\020\025\024\006" +
    "\032\027\036\013\037\020\001\001\000\002\001\001\000" +
    "\032\004\360\010\012\011\015\012\023\015\010\016\030" +
    "\017\011\020\025\024\006\032\027\036\013\037\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\200" +
    "\035\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\043\006\040" +
    "\010\035\011\042\012\050\013\036\014\037\015\033\016" +
    "\054\017\034\020\052\025\047\032\053\036\041\037\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\236\010\035\011\042\012\050\013\036\014\037" +
    "\015\033\016\054\017\034\020\052\025\047\032\053\036" +
    "\041\037\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\200\035\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\173\001\001\000\004\007\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\167\001\001\000\002\001" +
    "\001\000\006\034\076\035\074\001\001\000\004\007\160" +
    "\001\001\000\002\001\001\000\010\007\152\033\151\040" +
    "\147\001\001\000\004\035\100\001\001\000\004\007\102" +
    "\001\001\000\002\001\001\000\004\007\144\001\001\000" +
    "\002\001\001\000\004\007\143\001\001\000\004\007\142" +
    "\001\001\000\004\007\141\001\001\000\004\007\140\001" +
    "\001\000\004\007\137\001\001\000\004\007\136\001\001" +
    "\000\004\007\135\001\001\000\004\007\134\001\001\000" +
    "\004\007\133\001\001\000\004\007\132\001\001\000\004" +
    "\007\127\001\001\000\004\007\126\001\001\000\004\007" +
    "\125\001\001\000\002\001\001\000\004\007\124\001\001" +
    "\000\004\007\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\152\040\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\165\001\001" +
    "\000\002\001\001\000\004\007\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\214\001\001\000\010\007\152\033" +
    "\207\040\147\001\001\000\004\007\204\001\001\000\004" +
    "\035\100\001\001\000\004\007\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\227\001\001" +
    "\000\002\001\001\000\004\007\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\204\001\001\000\002\001\001\000\010\007\253\026\254" +
    "\027\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\264\027\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\005" +
    "\261\006\040\010\035\011\042\012\050\013\036\014\037" +
    "\015\033\016\054\017\034\020\052\025\047\032\053\036" +
    "\041\037\045\001\001\000\036\006\236\010\035\011\042" +
    "\012\050\013\036\014\037\015\033\016\054\017\034\020" +
    "\052\025\047\032\053\036\041\037\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\272\006\040\010\035\011\042\012" +
    "\050\013\036\014\037\015\033\016\054\017\034\020\052" +
    "\025\047\032\053\036\041\037\045\001\001\000\036\006" +
    "\236\010\035\011\042\012\050\013\036\014\037\015\033" +
    "\016\054\017\034\020\052\025\047\032\053\036\041\037" +
    "\045\001\001\000\002\001\001\000\006\007\264\027\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\005" +
    "\300\006\040\010\035\011\042\012\050\013\036\014\037" +
    "\015\033\016\054\017\034\020\052\025\047\032\053\036" +
    "\041\037\045\001\001\000\036\006\236\010\035\011\042" +
    "\012\050\013\036\014\037\015\033\016\054\017\034\020" +
    "\052\025\047\032\053\036\041\037\045\001\001\000\002" +
    "\001\001\000\010\011\306\030\307\031\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\306\031\315\001" +
    "\001\000\002\001\001\000\040\005\313\006\040\010\035" +
    "\011\042\012\050\013\036\014\037\015\033\016\054\017" +
    "\034\020\052\025\047\032\053\036\041\037\045\001\001" +
    "\000\036\006\236\010\035\011\042\012\050\013\036\014" +
    "\037\015\033\016\054\017\034\020\052\025\047\032\053" +
    "\036\041\037\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\005\317\006\040\010\035\011\042\012\050" +
    "\013\036\014\037\015\033\016\054\017\034\020\052\025" +
    "\047\032\053\036\041\037\045\001\001\000\036\006\236" +
    "\010\035\011\042\012\050\013\036\014\037\015\033\016" +
    "\054\017\034\020\052\025\047\032\053\036\041\037\045" +
    "\001\001\000\002\001\001\000\004\007\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\325\006\040" +
    "\010\035\011\042\012\050\013\036\014\037\015\033\016" +
    "\054\017\034\020\052\025\047\032\053\036\041\037\045" +
    "\001\001\000\036\006\236\010\035\011\042\012\050\013" +
    "\036\014\037\015\033\016\054\017\034\020\052\025\047" +
    "\032\053\036\041\037\045\001\001\000\002\001\001\000" +
    "\004\017\331\001\001\000\040\005\332\006\040\010\035" +
    "\011\042\012\050\013\036\014\037\015\033\016\054\017" +
    "\034\020\052\025\047\032\053\036\041\037\045\001\001" +
    "\000\002\001\001\000\036\006\236\010\035\011\042\012" +
    "\050\013\036\014\037\015\033\016\054\017\034\020\052" +
    "\025\047\032\053\036\041\037\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\346\006\040\010\035\011\042\012" +
    "\050\013\036\014\037\015\033\016\054\017\034\020\052" +
    "\025\047\032\053\036\041\037\045\001\001\000\036\006" +
    "\236\010\035\011\042\012\050\013\036\014\037\015\033" +
    "\016\054\017\034\020\052\025\047\032\053\036\041\037" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\005\356\006\040\010\035\011\042" +
    "\012\050\013\036\014\037\015\033\016\054\017\034\020" +
    "\052\025\047\032\053\036\041\037\045\001\001\000\036" +
    "\006\236\010\035\011\042\012\050\013\036\014\037\015" +
    "\033\016\054\017\034\020\052\025\047\032\053\036\041" +
    "\037\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\366\022\367\001\001\000\004\007\377\001" +
    "\001\000\006\022\373\023\372\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\376\006\040" +
    "\010\035\011\042\012\050\013\036\014\037\015\033\016" +
    "\054\017\034\020\052\025\047\032\053\036\041\037\045" +
    "\001\001\000\036\006\236\010\035\011\042\012\050\013" +
    "\036\014\037\015\033\016\054\017\034\020\052\025\047" +
    "\032\053\036\041\037\045\001\001\000\002\001\001\000" +
    "\040\005\u0101\006\040\010\035\011\042\012\050\013\036" +
    "\014\037\015\033\016\054\017\034\020\052\025\047\032" +
    "\053\036\041\037\045\001\001\000\036\006\236\010\035" +
    "\011\042\012\050\013\036\014\037\015\033\016\054\017" +
    "\034\020\052\025\047\032\053\036\041\037\045\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    
    public Arbol AST;

    public LinkedList<Mensaje> errores_sintacticos = new LinkedList<>();

    public Arbol getAST() {
        return AST;
    }

    public LinkedList<Mensaje> getErrores(){
        return errores_sintacticos;
    }

    public void syntax_error(Symbol s){
        errores_sintacticos.add(new Mensaje(s.left,s.right,tipo_mensaje.SINTACTICO,"No se esperaba este componente: " +s.value+"."));
    } 
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        errores_sintacticos.add(new Mensaje(s.left,s.right,tipo_mensaje.SINTACTICO,"Error síntactico irrecuperable, componente " + s.value + " no reconocido."));
    }    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.AST = new Arbol(ins); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int inssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int inssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> inss = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = inss; RESULT.add(ins); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(ins); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= print 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= ntwhile 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= ntdowhile 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= ntfor 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= ntif 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= ntswitch 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= ntfunction 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= llfunction 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= modificacion 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= modificacionMatriz 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= error PUNTOCOMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucciones_locales ::= instrucciones_locales instruccion_local 
            {
              LinkedList<Instruccion> RESULT =null;
		int inssleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int inssright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> inss = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = inss; RESULT.add(ins); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_locales",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones_locales ::= instruccion_local 
            {
              LinkedList<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(ins); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_locales",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion_local ::= print 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion_local ::= declaracion 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion_local ::= ntwhile 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion_local ::= ntbreak 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion_local ::= ntcontinue 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion_local ::= ntdowhile 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion_local ::= ntfor 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion_local ::= ntif 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion_local ::= ntswitch 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion_local ::= ntreturn 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion_local ::= llfunction 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion_local ::= modificacion 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion_local ::= modificacionMatriz 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ins; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion_local ::= error PUNTOCOMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_local",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // print ::= RPRINT PIZQ expresion PDER PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Print(exp,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // print ::= RPRINT PIZQ expresion PDER 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Print(exp,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion ::= IDENTIFICADOR ASIG expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(id,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion ::= IDENTIFICADOR ASIG expresion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(id,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ntwhile ::= RWHILE PIZQ expresion PDER LLIZQ instrucciones_locales LLDER 
            {
              Instruccion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new While(cond,ins,condleft,condright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntwhile",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ntbreak ::= RBREAK PUNTOCOMA 
            {
              Instruccion RESULT =null;
		 RESULT = new Break(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntbreak",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ntbreak ::= RBREAK 
            {
              Instruccion RESULT =null;
		 RESULT = new Break(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntbreak",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ntcontinue ::= RCONTINUE PUNTOCOMA 
            {
              Instruccion RESULT =null;
		 RESULT = new Continue(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntcontinue",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ntcontinue ::= RCONTINUE 
            {
              Instruccion RESULT =null;
		 RESULT = new Continue(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntcontinue",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ntdowhile ::= RDO LLIZQ instrucciones_locales LLDER RWHILE PIZQ expresion PDER PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new DoWhile(cond,ins,condleft,condright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntdowhile",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ntdowhile ::= RDO LLIZQ instrucciones_locales LLDER RWHILE PIZQ expresion PDER 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DoWhile(cond,ins,condleft,condright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntdowhile",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ntfor ::= RFOR PIZQ IDENTIFICADOR RIN expresion PDER LLIZQ instrucciones_locales LLDER 
            {
              Instruccion RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new For(var,exp,ins,varleft,varright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntfor",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ntif ::= RIF PIZQ expresion PDER LLIZQ instrucciones_locales LLDER 
            {
              Instruccion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                    Elseif temporal = new Elseif(cond,ins,condleft,condright);
                                                                                    LinkedList lista = new LinkedList<Elseif>();
                                                                                    lista.add(temporal);
                                                                                    RESULT = new If(lista);
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ntif ::= RIF PIZQ expresion PDER LLIZQ instrucciones_locales LLDER RELSE LLIZQ instrucciones_locales LLDER 
            {
              Instruccion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int insfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> insf = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                    Elseif temporal1 = new Elseif(cond,inst,condleft,condright);
                                                                                    Elseif temporal2 = new Elseif(insf,insfleft,insfright);
                                                                                    LinkedList lista = new LinkedList<Elseif>();
                                                                                    lista.add(temporal1);
                                                                                    lista.add(temporal2);
                                                                                    RESULT = new If(lista);
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ntif ::= RIF PIZQ expresion PDER LLIZQ instrucciones_locales LLDER RELSE ntif 
            {
              Instruccion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tifleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tifright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion tif = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                    Elseif temporal1 = new Elseif(cond,ins,condleft,condright);
                                                                                    ((If)tif).getLista_elseif().addFirst(temporal1);
                                                                                    RESULT = tif;
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ntswitch ::= RSWITCH PIZQ expresion PDER LLIZQ ntcases LLDER 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> cases = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Switch(exp,cases,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntswitch",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ntswitch ::= RSWITCH PIZQ expresion PDER LLIZQ ntcases ntdefault LLDER 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Case> cases = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Case def = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                    cases.add(def);
                                                                                    RESULT = new Switch(exp,cases,expleft,expright); 
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntswitch",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ntcases ::= ntcases ntcase 
            {
              LinkedList<Case> RESULT =null;
		int tcasesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tcasesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> tcases = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tcaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tcaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case tcase = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = tcases; RESULT.add(tcase); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntcases",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ntcases ::= ntcase 
            {
              LinkedList<Case> RESULT =null;
		int tcaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tcaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case tcase = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(tcase); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntcases",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ntcase ::= RCASE expresion DOSPUNTOS instrucciones_locales 
            {
              Case RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(exp,ins,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntcase",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ntdefault ::= RDEFAULT DOSPUNTOS instrucciones_locales 
            {
              Case RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(ins,insleft,insright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntdefault",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ntfunction ::= IDENTIFICADOR ASIG RFUNCTION PIZQ lista_parametrosi PDER LLIZQ instrucciones_locales LLDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Declaracion> lp = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                    RESULT = new Function(id,lp,ins,idleft,idright);
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntfunction",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ntfunction ::= IDENTIFICADOR ASIG RFUNCTION PIZQ PDER LLIZQ instrucciones_locales LLDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                    RESULT = new Function(id,ins,idleft,idright);
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntfunction",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ntfunction ::= IDENTIFICADOR ASIG PIZQ lista_parametros PDER ASGFUNCTION LLIZQ instrucciones_locales LLDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Declaracion> lp = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                    RESULT = new Function(id,lp,ins,idleft,idright);
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntfunction",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ntfunction ::= IDENTIFICADOR ASIG PIZQ expresion PDER ASGFUNCTION LLIZQ instrucciones_locales LLDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                    LinkedList lp = new LinkedList<Declaracion>();
                                                                                    
                                                                                    Declaracion t = new Declaracion(((Operacion)exp).getValor().toString(),expleft,expright);
                                                                                    lp.add(t);

                                                                                    RESULT = new Function(id,lp,ins,idleft,idright);
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntfunction",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ntfunction ::= IDENTIFICADOR ASIG PIZQ PDER ASGFUNCTION LLIZQ instrucciones_locales LLDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                    RESULT = new Function(id,ins,idleft,idright);
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntfunction",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_parametrosi ::= lista_parametrosi COMA parametroi 
            {
              LinkedList<Declaracion> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Declaracion> lp = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Declaracion p = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = lp; RESULT.add(p); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametrosi",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_parametrosi ::= parametroi 
            {
              LinkedList<Declaracion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Declaracion p = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Declaracion>(); RESULT.add(p); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametrosi",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametroi ::= IDENTIFICADOR 
            {
              Declaracion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(id,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametroi",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametroi ::= declaracion 
            {
              Declaracion RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion decl = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = (Declaracion)decl; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametroi",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_parametros ::= lista_parametros COMA parametro 
            {
              LinkedList<Declaracion> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Declaracion> lp = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Declaracion p = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = lp; RESULT.add(p); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_parametros ::= parametro COMA parametro 
            {
              LinkedList<Declaracion> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Declaracion p1 = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Declaracion p2 = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Declaracion>(); RESULT.add(p1); RESULT.add(p2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametro ::= expresion 
            {
              Declaracion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion id = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(((Operacion)id).getValor().toString(),idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametro ::= expresion ASIG expresion 
            {
              Declaracion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion id = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(((Operacion)id).getValor().toString(),exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ntreturn ::= RRETURN PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Return(rleft,rright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntreturn",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ntreturn ::= RRETURN 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Return(rleft,rright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntreturn",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ntreturn ::= RRETURN PIZQ expresion PDER PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Return(exp,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntreturn",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ntreturn ::= RRETURN PIZQ expresion PDER 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Return(exp,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntreturn",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // llfunction ::= IDENTIFICADOR PIZQ lista_valores PDER PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> lv = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LlamadaFunction(id,lv,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llfunction",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // llfunction ::= IDENTIFICADOR PIZQ lista_valores PDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> lv = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LlamadaFunction(id,lv,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llfunction",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // llfunction ::= IDENTIFICADOR PIZQ PDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LlamadaFunction(id,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llfunction",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // llfunction ::= IDENTIFICADOR PIZQ PDER PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new LlamadaFunction(id,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llfunction",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_valores ::= lista_valores COMA valor 
            {
              LinkedList<Instruccion> RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> lv = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = lv; RESULT.add(exp); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_valores ::= valor 
            {
              LinkedList<Instruccion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(exp); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor ::= expresion 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor ::= RDEFAULT 
            {
              Instruccion RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Default(defleft,defright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_acceso ::= lista_acceso acceso 
            {
              LinkedList<Instruccion> RESULT =null;
		int laccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int laccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> lacc = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion acc = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = lacc; RESULT.add(acc); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_acceso",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_acceso ::= acceso 
            {
              LinkedList<Instruccion> RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion acc = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(acc); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_acceso",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // acceso ::= CIZQ expresion CDER 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,true,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("acceso",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // acceso ::= CIZQ CIZQ expresion CDER CDER 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,false,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("acceso",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // modificacion ::= IDENTIFICADOR lista_acceso ASIG expresion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int laccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int laccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> lacc = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Modificacion(id,lacc,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("modificacion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // modificacion ::= IDENTIFICADOR lista_acceso ASIG expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int laccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int laccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> lacc = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Modificacion(id,lacc,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("modificacion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // modificacionMatriz ::= IDENTIFICADOR CIZQ expresion COMA expresion CDER ASIG expresion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion y = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ModificacionMatriz(id,x,y,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("modificacionMatriz",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // modificacionMatriz ::= IDENTIFICADOR CIZQ expresion COMA expresion CDER ASIG expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion y = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ModificacionMatriz(id,x,y,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("modificacionMatriz",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // modificacionMatriz ::= IDENTIFICADOR CIZQ expresion COMA CDER ASIG expresion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ModificacionMatriz(id,x,null,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("modificacionMatriz",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // modificacionMatriz ::= IDENTIFICADOR CIZQ expresion COMA CDER ASIG expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ModificacionMatriz(id,x,null,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("modificacionMatriz",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // modificacionMatriz ::= IDENTIFICADOR CIZQ COMA expresion CDER ASIG expresion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion y = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ModificacionMatriz(id,null,y,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("modificacionMatriz",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // modificacionMatriz ::= IDENTIFICADOR CIZQ COMA expresion CDER ASIG expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion y = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ModificacionMatriz(id,null,y,exp,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("modificacionMatriz",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.MENOS_UNARIO, exp, expleft, expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.NOT, exp, expleft, expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.SUMA,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.RESTA,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.MULTIPLICACION,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion DIVISION expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.DIVISION,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.POTENCIA,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion MODULO expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.MODULO,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion MENORQUE expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.MENOR_QUE,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion MAYORQUE expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.MAYOR_QUE,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= expresion MENORIGUALQUE expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.MENOR_IGUAL_QUE,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= expresion MAYORIGUALQUE expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.MAYOR_IGUAL_QUE,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= expresion IGUALQUE expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.IGUAL_QUE,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= expresion DISTINTOQUE expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.DISTINTO_QUE,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.OR,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion izq = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion der = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.AND,izq,der,izqleft,izqright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(Integer.parseInt(exp),expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(new Double(exp),expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(exp,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= RTRUE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(true,expleft,expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= RFALSE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(false, expleft, expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= IDENTIFICADOR 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operacion(tipo_operacion.IDENTIFICADOR,exp, expleft, expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= PIZQ expresion PDER 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = exp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= IDENTIFICADOR PIZQ lista_valores PDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> lv = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LlamadaFunction(id,lv,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= IDENTIFICADOR PIZQ PDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LlamadaFunction(id,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= expresion TERNARIO expresion DOSPUNTOS expresion 
            {
              Instruccion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int exp_trueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp_trueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp_true = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp_falseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp_falseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp_false = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OperadorTernario(cond,exp_true,exp_false,condleft,condright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= IDENTIFICADOR lista_acceso 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int laccleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int laccright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> lacc = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Acceso(id,lacc,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= RNULL 
            {
              Instruccion RESULT =null;
		 RESULT = new Null(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= IDENTIFICADOR CIZQ expresion COMA expresion CDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion y = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccesoMatriz(id,x,y,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= IDENTIFICADOR CIZQ expresion COMA CDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion x = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new AccesoMatriz(id,x,null,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= IDENTIFICADOR CIZQ COMA expresion CDER 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion y = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccesoMatriz(id,null,y,idleft,idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
