package analizadores; 

import java.util.LinkedList;
import java_cup.runtime.*;
import arbol.Acceso;
import arbol.Arbol;
import arbol.Break;
import arbol.Case;
import arbol.Continue;
import arbol.Declaracion;
import arbol.DoWhile;
import arbol.Elseif;
import arbol.For;
import arbol.Function;
import arbol.If;
import arbol.Instruccion;
import arbol.LlamadaFunction;
import arbol.Modificacion;
import Utilidades.Mensaje;
import Utilidades.Mensaje.tipo_mensaje;
import arbol.Null;
import arbol.Operacion;
import arbol.Operacion.tipo_operacion;
import arbol.OperadorTernario;
import arbol.Print;
import arbol.Return;
import arbol.Switch;
import arbol.While;

parser code 
{: 
    
    public Arbol AST;

    public LinkedList<Mensaje> errores_sintacticos = new LinkedList<>();

    public Arbol getAST() {
        return AST;
    }

    public LinkedList<Mensaje> getErrores(){
        return errores_sintacticos;
    }

    public void syntax_error(Symbol s){
        errores_sintacticos.add(new Mensaje(s.left,s.right,tipo_mensaje.SINTACTICO,"No se esperaba este componente: " +s.value+"."));
    } 
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        errores_sintacticos.add(new Mensaje(s.left,s.right,tipo_mensaje.SINTACTICO,"Error s√≠ntactico irrecuperable, componente " + s.value + " no reconocido."));
    }    
:} 

terminal String CADENA, RNULL, RTRUE, RFALSE, RIF, RELSE;
terminal String RSWITCH, RCASE, RBREAK, RWHILE, RDO, RFOR, RIN, RCONTINUE;
terminal String RRETURN, RFUNCTION, RDEFAULT, RPRINT;
terminal String RPIE, RBARPLOT, RPLOT, RHIST;
terminal String LLIZQ, LLDER, PIZQ, PDER, CIZQ, CDER, ASIG, PUNTOCOMA;
terminal String MAS, MENOS, MULTIPLICACION, DIVISION, POTENCIA, MODULO;
terminal String IGUALQUE, DISTINTOQUE, MENORQUE, MAYORQUE, MAYORIGUALQUE;
terminal String MENORIGUALQUE, AND, OR, NOT, TERNARIO, DOSPUNTOS, COMA;
terminal String ASGFUNCTION, IDENTIFICADOR, ENTERO, DECIMAL;
terminal String UMENOS;

non terminal inicio;
non terminal LinkedList<Instruccion> instrucciones;
non terminal Instruccion instruccion;
non terminal LinkedList<Instruccion> instrucciones_locales;
non terminal Instruccion instruccion_local;
non terminal Instruccion expresion;
non terminal Instruccion print;
non terminal Instruccion declaracion;
non terminal Instruccion ntwhile;
non terminal Instruccion ntbreak;
non terminal Instruccion ntcontinue;
non terminal Instruccion ntdowhile;
non terminal Instruccion ntfor;
non terminal Instruccion ntif;
non terminal Instruccion ntswitch;
non terminal LinkedList<Case> ntcases;
non terminal Case ntcase;
non terminal Case ntdefault;
non terminal Instruccion ntfunction;
non terminal Instruccion ntreturn;
non terminal LinkedList<Declaracion> lista_parametros;
non terminal Declaracion parametro;
non terminal Instruccion llfunction;
non terminal LinkedList<Instruccion> lista_valores;
non terminal LinkedList<Instruccion> lista_acceso;
non terminal Instruccion acceso;
non terminal Instruccion modificacion;

precedence right TERNARIO;
precedence left  OR;
precedence left  AND;
precedence right NOT;
precedence left  MENORQUE,MAYORQUE,MENORIGUALQUE,MAYORIGUALQUE,DISTINTOQUE,IGUALQUE;

precedence left  MAS,MENOS;
precedence left  MULTIPLICACION,DIVISION,MODULO;
precedence left  POTENCIA;
precedence right UMENOS; 

precedence right RELSE;

start with inicio; 

inicio ::= instrucciones:ins                                                    {: parser.AST = new Arbol(ins); :}
;

//-------------------------------------------Instrucciones globales--------------------------------------------------------//
instrucciones ::= instrucciones:inss instruccion:ins                            {: RESULT = inss; RESULT.add(ins); :}
            | instruccion:ins                                                   {: RESULT = new LinkedList<>(); RESULT.add(ins); :}
;

instruccion ::= print:ins                                                       {: RESULT = ins; :} 
            | declaracion:ins                                                   {: RESULT = ins; :}
            | ntwhile:ins                                                       {: RESULT = ins; :}
            | ntdowhile:ins                                                     {: RESULT = ins; :}
            | ntfor:ins                                                         {: RESULT = ins; :}
            | ntif:ins                                                          {: RESULT = ins; :}
            | ntswitch:ins                                                      {: RESULT = ins; :}
            | ntfunction:ins                                                    {: RESULT = ins; :}
            | llfunction:ins                                                    {: RESULT = ins; :}
            | modificacion:ins                                                  {: RESULT = ins; :}
;

//---------------------------Instrucciones que solo pueden ir en una instruccion de control---------------------------------//
instrucciones_locales ::= instrucciones_locales:inss instruccion_local:ins      {: RESULT = inss; RESULT.add(ins); :}
            | instruccion_local:ins                                             {: RESULT = new LinkedList<>(); RESULT.add(ins); :}
;

instruccion_local ::= print:ins                                                 {: RESULT = ins; :} 
            | declaracion:ins                                                   {: RESULT = ins; :}
            | ntwhile:ins                                                       {: RESULT = ins; :}
            | ntbreak:ins                                                       {: RESULT = ins; :}
            | ntcontinue:ins                                                    {: RESULT = ins; :}
            | ntdowhile:ins                                                     {: RESULT = ins; :}
            | ntfor:ins                                                         {: RESULT = ins; :}
            | ntif:ins                                                          {: RESULT = ins; :}
            | ntswitch:ins                                                      {: RESULT = ins; :}
            | ntreturn:ins                                                      {: RESULT = ins; :}
            | llfunction:ins                                                    {: RESULT = ins; :}
            | modificacion: ins                                                 {: RESULT = ins; :}
;

//---------------------------------------------------Instrucciones-----------------------------------------------------------//
print ::= RPRINT PIZQ expresion:exp PDER PUNTOCOMA                              {: RESULT = new Print(exp,expleft,expright); :}
        | RPRINT PIZQ expresion:exp PDER                                        {: RESULT = new Print(exp,expleft,expright); :}
;

declaracion ::= IDENTIFICADOR:id ASIG expresion:exp                             {: RESULT = new Declaracion(id,exp,idleft,idright); :}
            | IDENTIFICADOR:id ASIG expresion:exp PUNTOCOMA                     {: RESULT = new Declaracion(id,exp,idleft,idright); :}
;

ntwhile ::= RWHILE PIZQ expresion:cond PDER LLIZQ instrucciones_locales:ins LLDER
                                                                                {: RESULT = new While(cond,ins,condleft,condright); :}
;

ntbreak ::= RBREAK PUNTOCOMA                                                    {: RESULT = new Break(); :}
           | RBREAK                                                             {: RESULT = new Break(); :}
;

ntcontinue ::= RCONTINUE PUNTOCOMA                                              {: RESULT = new Continue(); :}
            | RCONTINUE                                                         {: RESULT = new Continue(); :}
;

ntdowhile ::= RDO LLIZQ instrucciones_locales:ins LLDER RWHILE PIZQ expresion:cond PDER PUNTOCOMA
                                                                                {: RESULT = new DoWhile(cond,ins,condleft,condright); :}
            | RDO LLIZQ instrucciones_locales:ins LLDER RWHILE PIZQ expresion:cond PDER
                                                                                {: RESULT = new DoWhile(cond,ins,condleft,condright); :}
;

ntfor ::= RFOR PIZQ IDENTIFICADOR:var RIN expresion:exp LLIZQ instrucciones_locales:ins LLDER
                                                                                {: RESULT = new For(var,exp,ins,varleft,varright); :}
;

ntif ::= RIF PIZQ expresion:cond PDER LLIZQ instrucciones_locales:ins LLDER
                                                                                {:
                                                                                    Elseif temporal = new Elseif(cond,ins,condleft,condright);
                                                                                    LinkedList lista = new LinkedList<Elseif>();
                                                                                    lista.add(temporal);
                                                                                    RESULT = new If(lista);
                                                                                :}

    | RIF PIZQ expresion:cond PDER LLIZQ instrucciones_locales:inst LLDER RELSE LLIZQ instrucciones_locales:insf LLDER
                                                                                {:
                                                                                    Elseif temporal1 = new Elseif(cond,inst,condleft,condright);
                                                                                    Elseif temporal2 = new Elseif(insf,insfleft,insfright);
                                                                                    LinkedList lista = new LinkedList<Elseif>();
                                                                                    lista.add(temporal1);
                                                                                    lista.add(temporal2);
                                                                                    RESULT = new If(lista);
                                                                                :}
    | RIF PIZQ expresion:cond PDER LLIZQ instrucciones_locales:ins LLDER RELSE ntif:tif
                                                                                {:
                                                                                    Elseif temporal1 = new Elseif(cond,ins,condleft,condright);
                                                                                    ((If)tif).getLista_elseif().addFirst(temporal1);
                                                                                    RESULT = tif;
                                                                                :}
;

ntswitch ::= RSWITCH PIZQ expresion:exp PDER LLIZQ ntcases:cases LLDER          
                                                                                {: RESULT = new Switch(exp,cases,expleft,expright); :}
            | RSWITCH PIZQ expresion:exp PDER LLIZQ ntcases:cases ntdefault:def LLDER          
                                                                                {:
                                                                                    cases.add(def);
                                                                                    RESULT = new Switch(exp,cases,expleft,expright); 
                                                                                :}           
;     

ntcases::= ntcases:tcases ntcase:tcase                                          {: RESULT = tcases; RESULT.add(tcase); :}
    | ntcase:tcase                                                              {: RESULT = new LinkedList<Case>(); RESULT.add(tcase); :}
;

ntcase ::= RCASE expresion:exp DOSPUNTOS instrucciones_locales:ins              {: RESULT = new Case(exp,ins,expleft,expright); :}
;

ntdefault ::= RDEFAULT DOSPUNTOS instrucciones_locales:ins                      {: RESULT = new Case(ins,insleft,insright); :}
;

//----------------------------------------------------Funciones------------------------------------------------------------//
ntfunction ::= IDENTIFICADOR:id ASIG RFUNCTION PIZQ lista_parametros:lp PDER LLIZQ instrucciones_locales:ins LLDER 
                                                                                {:
                                                                                    RESULT = new Function(id,lp,ins,idleft,idright);
                                                                                :}
/*            | IDENTIFICADOR:id ASIG PIZQ lista_parametros:lp PDER ASGFUNCTION LLIZQ instrucciones_locales:ins LLDER
                                                                                {:
                                                                                    RESULT = new Function(id,lp,ins,idleft,idright);
                                                                                :}
*/
;

lista_parametros ::= lista_parametros:lp COMA parametro:p                       {: RESULT = lp; RESULT.add(p); :}
            | parametro:p                                                       {: RESULT = new LinkedList<Declaracion>(); RESULT.add(p); :}
;

parametro ::= IDENTIFICADOR:id                                                  {: RESULT = new Declaracion(id,idleft,idright); :}
            | declaracion:decl                                                  {: RESULT = (Declaracion)decl; :}
;

ntreturn ::= RRETURN:r PUNTOCOMA                                                {: RESULT = new Return(rleft,rright); :}
            | RRETURN expresion:exp PUNTOCOMA                                   {: RESULT = new Return(exp,expleft,expright); :}
            | RRETURN expresion:exp                                             {: RESULT = new Return(exp,expleft,expright); :}
;

llfunction ::= IDENTIFICADOR:id PIZQ lista_valores:lv PDER PUNTOCOMA            {: RESULT = new LlamadaFunction(id,lv,idleft,idright); :}
            | IDENTIFICADOR:id PIZQ lista_valores:lv PDER                       {: RESULT = new LlamadaFunction(id,lv,idleft,idright); :}
;

lista_valores ::= lista_valores:lv COMA expresion:exp                           {: RESULT = lv; RESULT.add(exp); :}
            | expresion:exp                                                     {: RESULT = new LinkedList<Instruccion>(); RESULT.add(exp); :}
;

//------------------------------------------------------Arreglos-------------------------------------------------------------//
lista_acceso::= lista_acceso:lacc acceso:acc                                    {: RESULT = lacc; RESULT.add(acc); :}
            | acceso:acc                                                        {: RESULT = new LinkedList<Instruccion>(); RESULT.add(acc); :}
;

acceso ::= CIZQ expresion:exp CDER                                              {: RESULT = new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,true,expleft,expright); :}
            | CIZQ CIZQ expresion:exp CDER CDER                                 {: RESULT = new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,false,expleft,expright); :}
;

modificacion ::= IDENTIFICADOR:id lista_acceso:lacc ASIG expresion:exp PUNTOCOMA   
                                                                                {: RESULT = new Modificacion(id,lacc,exp,idleft,idright); :}
            | IDENTIFICADOR:id lista_acceso:lacc ASIG expresion:exp                
                                                                                {: RESULT = new Modificacion(id,lacc,exp,idleft,idright); :}
;

//----------------------------------------------------Expresiones------------------------------------------------------------//
expresion ::= 
              MENOS expresion:exp                                               {: RESULT = new Operacion(tipo_operacion.MENOS_UNARIO, exp, expleft, expright); :}%prec UMENOS     
            | NOT expresion:exp                                                 {: RESULT = new Operacion(tipo_operacion.NOT, exp, expleft, expright); :}%prec UMENOS     
            | expresion:izq MAS expresion:der                                   {: RESULT = new Operacion(tipo_operacion.SUMA,izq,der,izqleft,izqright); :}
            | expresion:izq MENOS expresion:der                                 {: RESULT = new Operacion(tipo_operacion.RESTA,izq,der,izqleft,izqright); :}
            | expresion:izq MULTIPLICACION expresion:der                        {: RESULT = new Operacion(tipo_operacion.MULTIPLICACION,izq,der,izqleft,izqright); :}
            | expresion:izq DIVISION expresion:der                              {: RESULT = new Operacion(tipo_operacion.DIVISION,izq,der,izqleft,izqright); :}
            | expresion:izq POTENCIA expresion:der                              {: RESULT = new Operacion(tipo_operacion.POTENCIA,izq,der,izqleft,izqright); :}
            | expresion:izq MODULO expresion:der                                {: RESULT = new Operacion(tipo_operacion.MODULO,izq,der,izqleft,izqright); :}
            | expresion:izq MENORQUE expresion:der                              {: RESULT = new Operacion(tipo_operacion.MENOR_QUE,izq,der,izqleft,izqright); :}
            | expresion:izq MAYORQUE expresion:der                              {: RESULT = new Operacion(tipo_operacion.MAYOR_QUE,izq,der,izqleft,izqright); :}
            | expresion:izq MENORIGUALQUE expresion:der                         {: RESULT = new Operacion(tipo_operacion.MENOR_IGUAL_QUE,izq,der,izqleft,izqright); :}
            | expresion:izq MAYORIGUALQUE expresion:der                         {: RESULT = new Operacion(tipo_operacion.MAYOR_IGUAL_QUE,izq,der,izqleft,izqright); :}
            | expresion:izq IGUALQUE expresion:der                              {: RESULT = new Operacion(tipo_operacion.IGUAL_QUE,izq,der,izqleft,izqright); :}
            | expresion:izq DISTINTOQUE expresion:der                           {: RESULT = new Operacion(tipo_operacion.DISTINTO_QUE,izq,der,izqleft,izqright); :}           
            | expresion:izq OR expresion:der                                    {: RESULT = new Operacion(tipo_operacion.OR,izq,der,izqleft,izqright); :}           
            | expresion:izq AND expresion:der                                   {: RESULT = new Operacion(tipo_operacion.AND,izq,der,izqleft,izqright); :}           
            | ENTERO:exp                                                        {: RESULT = new Operacion(Integer.parseInt(exp),expleft,expright); :}
            | DECIMAL:exp                                                       {: RESULT = new Operacion(new Double(exp),expleft,expright); :}
            | CADENA:exp                                                        {: RESULT = new Operacion(exp,expleft,expright); :}
            | RTRUE:exp                                                         {: RESULT = new Operacion(true,expleft,expright); :}
            | RFALSE:exp                                                        {: RESULT = new Operacion(false, expleft, expright); :}
            | IDENTIFICADOR:exp                                                 {: RESULT = new Operacion(tipo_operacion.IDENTIFICADOR,exp, expleft, expright); :}
            | PIZQ expresion:exp PDER                                           {: RESULT = exp; :}
            | IDENTIFICADOR:id PIZQ lista_valores:lv PDER                       {: RESULT = new LlamadaFunction(id,lv,idleft,idright); :}
            | expresion:cond TERNARIO expresion:exp_true DOSPUNTOS expresion:exp_false
                                                                                {: RESULT = new OperadorTernario(cond,exp_true,exp_false,condleft,condright); :}
            | IDENTIFICADOR:id lista_acceso:lacc                                {: RESULT = new Acceso(id,lacc,idleft,idright); :}
            | RNULL                                                             {: RESULT = new Null(); :}
;