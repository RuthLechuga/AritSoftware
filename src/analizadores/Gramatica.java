/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
package analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;

import arbol.Acceso;
import arbol.AccesoMatriz;
import arbol.Arbol;
import arbol.Break;
import arbol.Case;
import arbol.Continue;
import arbol.Declaracion;
import arbol.DoWhile;
import arbol.Elseif;
import arbol.For;
import arbol.Function;
import arbol.If;
import arbol.Instruccion;
import arbol.LlamadaFunction;
import arbol.Modificacion;
import arbol.ModificacionMatriz;
import Utilidades.Mensaje;
import Utilidades.Mensaje.tipo_mensaje;
import arbol.Null;
import arbol.Operacion;
import arbol.Operacion.tipo_operacion;
import arbol.OperadorTernario;
import arbol.Print;
import arbol.Return;
import arbol.Switch;
import arbol.While;

public class Gramatica implements GramaticaConstants {

    public LinkedList<Instruccion> instrucciones = new LinkedList<Instruccion>();

/** Fin Lexico */

//-------------------------------------------Instrucciones globales--------------------------------------------------------//
  final public void start() throws ParseException {
    Instruccion instr;
    label_1:
    while (true) {
      instr = instruccion();
                            instrucciones.add(instr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RPRINT:
      case RIF:
      case RSWITCH:
      case RWHILE:
      case RFOR:
      case RDO:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public Instruccion instruccion() throws ParseException {
    Instruccion instr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RPRINT:
      instr = imprimir();
      break;
    case RIF:
      instr = ntif();
      break;
    case RSWITCH:
      instr = ntswitch();
      break;
    case RWHILE:
      instr = ntwhile();
      break;
    case RDO:
      instr = ntdowhile();
      break;
    case RFOR:
      instr = ntfor();
      break;
    case IDENTIFICADOR:
      instr = inst_id();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return instr;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion inst_id() throws ParseException {
    String identificador;
    String nombre;
    String nombre_function;
    Instruccion exp = null;
    Instruccion t;
    Instruccion x;
    Instruccion y;
    LinkedList<Declaracion> parametros = new LinkedList<Declaracion>();
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
    LinkedList<Instruccion> valores = new LinkedList<Instruccion>();
    LinkedList<Instruccion> accesos = new LinkedList<Instruccion>();
    if (jj_2_3(5)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(ASIG);
      jj_consume_token(PIZQ);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        t = declaracion();
                         parametros.add(((Declaracion)t));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          jj_consume_token(COMA);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      }
      jj_consume_token(PDER);
      jj_consume_token(ASG_FUNC);
      jj_consume_token(LLIZQ);
      bloque_instrucciones = instrucciones_locales();
      jj_consume_token(LLDER);
        {if (true) return new Function(identificador,parametros,bloque_instrucciones,token.beginLine,token.beginColumn);}
    } else if (jj_2_4(3)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(ASIG);
      exp = Expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
        {if (true) return new Declaracion(identificador, exp, token.beginLine, token.beginColumn);}
    } else if (jj_2_5(5)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(ASIG);
      jj_consume_token(RFUNCTION);
      jj_consume_token(PIZQ);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        t = declaracion();
                         parametros.add(((Declaracion)t));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          jj_consume_token(COMA);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
      }
      jj_consume_token(PDER);
      jj_consume_token(LLIZQ);
      bloque_instrucciones = instrucciones_locales();
      jj_consume_token(LLDER);
        {if (true) return new Function(identificador,parametros,bloque_instrucciones,token.beginLine,token.beginColumn);}
    } else if (jj_2_6(5)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      label_4:
      while (true) {
        if (jj_2_1(2)) {
          jj_consume_token(CIZQ);
          exp = Expresion();
          jj_consume_token(CDER);
             accesos.add(new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,true,token.beginLine,token.beginColumn));
        } else if (jj_2_2(2)) {
          jj_consume_token(CIZQ);
          jj_consume_token(CIZQ);
          exp = Expresion();
          jj_consume_token(CDER);
          jj_consume_token(CDER);
             accesos.add(new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,false,token.beginLine,token.beginColumn));
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CIZQ:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(ASIG);
      exp = Expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
        {if (true) return new Modificacion(identificador,accesos,exp,token.beginLine,token.beginColumn);}
    } else if (jj_2_7(5)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(CIZQ);
      x = Expresion();
      jj_consume_token(COMA);
      y = Expresion();
      jj_consume_token(CDER);
      jj_consume_token(ASIG);
      exp = Expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
        {if (true) return new ModificacionMatriz(identificador,x,y,exp,token.beginLine,token.beginColumn);}
    } else if (jj_2_8(5)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(CIZQ);
      x = Expresion();
      jj_consume_token(COMA);
      jj_consume_token(CDER);
      jj_consume_token(ASIG);
      exp = Expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
        {if (true) return new ModificacionMatriz(identificador,x,null,exp,token.beginLine,token.beginColumn);}
    } else if (jj_2_9(5)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(CIZQ);
      jj_consume_token(COMA);
      y = Expresion();
      jj_consume_token(CDER);
      jj_consume_token(ASIG);
      exp = Expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
        {if (true) return new ModificacionMatriz(identificador,null,y,exp,token.beginLine,token.beginColumn);}
    } else if (jj_2_10(5)) {
      nombre_function = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(PIZQ);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case DECIMAL:
        case CADENA:
        case PIZQ:
        case MENOS:
        case TRUE:
        case FALSE:
        case NULL:
        case NOT:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        exp = Expresion();
                           valores.add(exp);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          jj_consume_token(COMA);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
      }
      jj_consume_token(PDER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
        {if (true) return new LlamadaFunction(nombre_function,valores,token.beginLine,token.beginColumn);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//---------------------------Instrucciones que solo pueden ir en una instruccion de control---------------------------------//
  final public LinkedList<Instruccion> instrucciones_locales() throws ParseException {
    Instruccion instr;
    LinkedList<Instruccion> ins_locales = new LinkedList<Instruccion>();
    label_6:
    while (true) {
      instr = instruccion_local();
                                  ins_locales.add(instr);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RPRINT:
      case RIF:
      case RSWITCH:
      case RBREAK:
      case RWHILE:
      case RCONTINUE:
      case RFOR:
      case RDO:
      case RRETURN:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
    }
        {if (true) return ins_locales;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion instruccion_local() throws ParseException {
    Instruccion instr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RPRINT:
      instr = imprimir();
      break;
    case RIF:
      instr = ntif();
      break;
    case RBREAK:
      instr = ntbreak();
      break;
    case RSWITCH:
      instr = ntswitch();
      break;
    case RCONTINUE:
      instr = ntcontinue();
      break;
    case RWHILE:
      instr = ntwhile();
      break;
    case RDO:
      instr = ntdowhile();
      break;
    case RFOR:
      instr = ntfor();
      break;
    case RRETURN:
      instr = ntreturn();
      break;
    case IDENTIFICADOR:
      instr = inst_id();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return instr;}
    throw new Error("Missing return statement in function");
  }

//---------------------------------------------------Instrucciones-----------------------------------------------------------//
  final public If ntif() throws ParseException {
    Instruccion exp;
    If Tif;
    Elseif ifp;
    LinkedList<Elseif> Telseif = new LinkedList<Elseif>();
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
    jj_consume_token(RIF);
    jj_consume_token(PIZQ);
    exp = Expresion();
    jj_consume_token(PDER);
    jj_consume_token(LLIZQ);
    bloque_instrucciones = instrucciones_locales();
    jj_consume_token(LLDER);
      ifp = new Elseif(exp,bloque_instrucciones,token.beginLine,token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELSE:
      if (jj_2_11(2)) {
        jj_consume_token(RELSE);
        Tif = ntif();
            Telseif.addAll(Tif.getLista_elseif());
      } else if (jj_2_12(2)) {
        jj_consume_token(RELSE);
        jj_consume_token(LLIZQ);
        bloque_instrucciones = instrucciones_locales();
        jj_consume_token(LLDER);
         Telseif.addLast(new Elseif(bloque_instrucciones,token.beginLine,token.beginColumn));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
        Telseif.addFirst(ifp);
        {if (true) return new If(Telseif);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion declaracion() throws ParseException {
    String identificador;
    Instruccion exp = null;
    identificador = jj_consume_token(IDENTIFICADOR).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      exp = Expresion();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTOCOMA:
      jj_consume_token(PUNTOCOMA);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
        {if (true) return new Declaracion(identificador, exp, token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ntswitch() throws ParseException {
    Instruccion exp;
    Instruccion exp_case;
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
    LinkedList<Case> cases = new LinkedList<Case>();
    jj_consume_token(RSWITCH);
    jj_consume_token(PIZQ);
                      exp = Expresion();
    jj_consume_token(PDER);
    jj_consume_token(LLIZQ);
    label_7:
    while (true) {
      jj_consume_token(RCASE);
                 exp_case=Expresion();
      jj_consume_token(DOSPUNTOS);
         bloque_instrucciones = instrucciones_locales(); cases.add(new Case(exp_case,bloque_instrucciones,token.beginLine,token.beginColumn));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RCASE:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RDEFAULT:
      jj_consume_token(RDEFAULT);
      jj_consume_token(DOSPUNTOS);
         bloque_instrucciones = instrucciones_locales(); cases.add(new Case(bloque_instrucciones,token.beginLine,token.beginColumn));
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(LLDER);
        {if (true) return new Switch(exp,cases,token.beginLine,token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ntwhile() throws ParseException {
    Instruccion exp;
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
    jj_consume_token(RWHILE);
    jj_consume_token(PIZQ);
                     exp=Expresion();
    jj_consume_token(PDER);
    jj_consume_token(LLIZQ);
                                                       bloque_instrucciones=instrucciones_locales();
    jj_consume_token(LLDER);
        {if (true) return new While(exp,bloque_instrucciones,token.beginLine,token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ntdowhile() throws ParseException {
    Instruccion exp;
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
    jj_consume_token(RDO);
    jj_consume_token(LLIZQ);
                   bloque_instrucciones=instrucciones_locales();
    jj_consume_token(LLDER);
    jj_consume_token(RWHILE);
    jj_consume_token(PIZQ);
                                                                                           exp=Expresion();
    jj_consume_token(PDER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTOCOMA:
      jj_consume_token(PUNTOCOMA);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
        {if (true) return new DoWhile(exp,bloque_instrucciones,token.beginLine,token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ntfor() throws ParseException {
    String variable;
    Instruccion exp;
    LinkedList<Instruccion> bloque_instrucciones = new LinkedList<Instruccion>();
    jj_consume_token(RFOR);
    jj_consume_token(PIZQ);
    variable = jj_consume_token(IDENTIFICADOR).image;
    jj_consume_token(RIN);
    exp = Expresion();
    jj_consume_token(PDER);
    jj_consume_token(LLIZQ);
    bloque_instrucciones = instrucciones_locales();
    jj_consume_token(LLDER);
        {if (true) return new For(variable,exp,bloque_instrucciones,token.beginLine,token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion imprimir() throws ParseException {
    Instruccion exp;
    jj_consume_token(RPRINT);
    jj_consume_token(PIZQ);
    exp = Expresion();
    jj_consume_token(PDER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTOCOMA:
      jj_consume_token(PUNTOCOMA);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
        {if (true) return new Print(exp,token.beginLine,token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ntbreak() throws ParseException {
    jj_consume_token(RBREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTOCOMA:
      jj_consume_token(PUNTOCOMA);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
                             {if (true) return new Break();}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ntcontinue() throws ParseException {
    jj_consume_token(RCONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTOCOMA:
      jj_consume_token(PUNTOCOMA);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
                                {if (true) return new Continue();}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ntreturn() throws ParseException {
    Instruccion exp=null;
    if (jj_2_13(2)) {
      jj_consume_token(RRETURN);
      jj_consume_token(PIZQ);
      exp = Expresion();
      jj_consume_token(PDER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
                                                              {if (true) return new Return(exp,token.beginLine,token.beginColumn);}
    } else if (jj_2_14(2)) {
      jj_consume_token(RRETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
                                  {if (true) return new Return(token.beginLine,token.beginColumn);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//---------------------------------------------------Expresiones-----------------------------------------------------------//
  final public Instruccion Expresion() throws ParseException {
    Instruccion cond;
    Instruccion exp_true=null;
    Instruccion exp_false=null;
    cond = ExpresionOr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TERNARIO:
      jj_consume_token(TERNARIO);
      exp_true = ExpresionOr();
      jj_consume_token(DOSPUNTOS);
      exp_false = ExpresionOr();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
        if(exp_true == null && exp_false == null)
            {if (true) return cond;}
        else
            {if (true) return new OperadorTernario(cond,exp_true,exp_false,token.beginLine,token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ExpresionOr() throws ParseException {
    Instruccion izq;
    Instruccion der;
    izq = ExpresionAnd();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_8;
      }
      jj_consume_token(OR);
      der = ExpresionAnd();
                                 izq = new Operacion(tipo_operacion.OR,izq,der,token.beginLine,token.beginColumn);
    }
        {if (true) return izq;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ExpresionAnd() throws ParseException {
    Instruccion izq;
    Instruccion der;
    izq = ExpresionIgualdad();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
      der = ExpresionIgualdad();
                                       izq = new Operacion(tipo_operacion.AND,izq,der,token.beginLine,token.beginColumn);
    }
        {if (true) return izq;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ExpresionIgualdad() throws ParseException {
    Instruccion izq;
    Instruccion der;
    izq = ExpresionRelacional();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALQUE:
      case DISTINTOQUE:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALQUE:
        jj_consume_token(IGUALQUE);
        der = ExpresionRelacional();
                                              izq = new Operacion(tipo_operacion.IGUAL_QUE,izq,der,token.beginLine,token.beginColumn);
        break;
      case DISTINTOQUE:
        jj_consume_token(DISTINTOQUE);
        der = ExpresionRelacional();
                                                 izq = new Operacion(tipo_operacion.DISTINTO_QUE,izq,der,token.beginLine,token.beginColumn);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return izq;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ExpresionRelacional() throws ParseException {
    Instruccion izq;
    Instruccion der;
    izq = ExpresionAditiva();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYORQUE:
      case MENORQUE:
      case MAYORIGUALQUE:
      case MENORIGUALQUE:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYORQUE:
        jj_consume_token(MAYORQUE);
        der = ExpresionAditiva();
                                           izq = new Operacion(tipo_operacion.MAYOR_QUE,izq,der,token.beginLine,token.beginColumn);
        break;
      case MENORQUE:
        jj_consume_token(MENORQUE);
        der = ExpresionAditiva();
                                           izq = new Operacion(tipo_operacion.MENOR_QUE,izq,der,token.beginLine,token.beginColumn);
        break;
      case MAYORIGUALQUE:
        jj_consume_token(MAYORIGUALQUE);
        der = ExpresionAditiva();
                                                izq = new Operacion(tipo_operacion.MAYOR_IGUAL_QUE,izq,der,token.beginLine,token.beginColumn);
        break;
      case MENORIGUALQUE:
        jj_consume_token(MENORIGUALQUE);
        der = ExpresionAditiva();
                                                izq = new Operacion(tipo_operacion.MENOR_IGUAL_QUE,izq,der,token.beginLine,token.beginColumn);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return izq;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ExpresionAditiva() throws ParseException {
    Instruccion izq;
    Instruccion der;
    izq = ExpresionMultiplicativa();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        der = ExpresionMultiplicativa();
                                             izq = new Operacion(tipo_operacion.SUMA,izq,der,token.beginLine,token.beginColumn);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        der = ExpresionMultiplicativa();
                                               izq = new Operacion(tipo_operacion.RESTA,izq,der,token.beginLine,token.beginColumn);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return izq;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ExpresionMultiplicativa() throws ParseException {
    Instruccion izq;
    Instruccion der;
    izq = ExpresionExponente();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIV:
      case MODULO:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        der = ExpresionExponente();
                                         izq = new Operacion(tipo_operacion.MULTIPLICACION,izq,der,token.beginLine,token.beginColumn);
        break;
      case DIV:
        jj_consume_token(DIV);
        der = ExpresionExponente();
                                         izq = new Operacion(tipo_operacion.DIVISION,izq,der,token.beginLine,token.beginColumn);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        der = ExpresionExponente();
                                            izq = new Operacion(tipo_operacion.MODULO,izq,der,token.beginLine,token.beginColumn);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return izq;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ExpresionExponente() throws ParseException {
    Instruccion izq;
    Instruccion der;
    izq = ExpresionUnaria();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POTENCIA:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_14;
      }
      jj_consume_token(POTENCIA);
      der = ExpresionUnaria();
                                           izq = new Operacion(tipo_operacion.POTENCIA,izq,der,token.beginLine,token.beginColumn);
    }
        {if (true) return izq;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ExpresionUnaria() throws ParseException {
    Instruccion exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOS:
      jj_consume_token(MENOS);
      exp = ExpresionUnaria();
                                   {if (true) return new Operacion(tipo_operacion.MENOS_UNARIO, exp, token.beginLine, token.beginColumn);}
      break;
    case NOT:
      jj_consume_token(NOT);
      exp = ExpresionUnaria();
                                 {if (true) return new Operacion(tipo_operacion.NOT, exp, token.beginLine, token.beginColumn);}
      break;
    case NUM:
    case DECIMAL:
    case CADENA:
    case PIZQ:
    case TRUE:
    case FALSE:
    case NULL:
    case IDENTIFICADOR:
      exp = Primitivo();
                     {if (true) return exp;}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Instruccion Primitivo() throws ParseException {
    Instruccion e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
              {if (true) return new Operacion(Integer.parseInt(token.image),token.beginLine,token.beginColumn);}
      break;
    case CADENA:
      jj_consume_token(CADENA);
                {if (true) return new Operacion(token.image.substring(1,token.image.length()-1),token.beginLine,token.beginColumn);}
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
                 {if (true) return new Operacion(new Double(token.image),token.beginLine,token.beginColumn);}
      break;
    case PIZQ:
      jj_consume_token(PIZQ);
      e = Expresion();
      jj_consume_token(PDER);
                                   {if (true) return e;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
             {if (true) return new Operacion(true,token.beginLine,token.beginColumn);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
              {if (true) return new Operacion(false,token.beginLine,token.beginColumn);}
      break;
    case NULL:
      jj_consume_token(NULL);
             {if (true) return new Null();}
      break;
    case IDENTIFICADOR:
      e = ExpresionIdentificadores();
                                   {if (true) return e;}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Instruccion ExpresionIdentificadores() throws ParseException {
    String identificador;
    Instruccion exp=null;
    LinkedList<Instruccion> valores = new LinkedList<Instruccion>();
    LinkedList<Instruccion> accesos = new LinkedList<Instruccion>();
    Instruccion x;
    Instruccion y;
    if (jj_2_16(2147483647)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(CIZQ);
      x = Expresion();
      jj_consume_token(COMA);
      y = Expresion();
      jj_consume_token(CDER);
        {if (true) return new AccesoMatriz(identificador,x,y,token.beginLine,token.beginColumn);}
    } else if (jj_2_17(2147483647)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(CIZQ);
      x = Expresion();
      jj_consume_token(COMA);
      jj_consume_token(CDER);
        {if (true) return new AccesoMatriz(identificador,x,null,token.beginLine,token.beginColumn);}
    } else if (jj_2_18(2147483647)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(CIZQ);
      jj_consume_token(COMA);
      y = Expresion();
      jj_consume_token(CDER);
        {if (true) return new AccesoMatriz(identificador,null,y,token.beginLine,token.beginColumn);}
    } else if (jj_2_19(5)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      jj_consume_token(PIZQ);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case DECIMAL:
        case CADENA:
        case PIZQ:
        case MENOS:
        case TRUE:
        case FALSE:
        case NULL:
        case NOT:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_15;
        }
        exp = Expresion();
                           valores.add(exp);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          jj_consume_token(COMA);
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
      }
      jj_consume_token(PDER);
        {if (true) return new LlamadaFunction(identificador,valores,token.beginLine,token.beginColumn);}
    } else if (jj_2_20(5)) {
      identificador = jj_consume_token(IDENTIFICADOR).image;
      label_16:
      while (true) {
        if (jj_2_15(2)) {
          jj_consume_token(CIZQ);
          jj_consume_token(CIZQ);
          exp = Expresion();
          jj_consume_token(CDER);
          jj_consume_token(CDER);
             accesos.add(new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,false,token.beginLine,token.beginColumn));
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CIZQ:
            jj_consume_token(CIZQ);
            exp = Expresion();
            jj_consume_token(CDER);
             accesos.add(new Operacion(tipo_operacion.ACCESO_ARREGLO,exp,true,token.beginLine,token.beginColumn));
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CIZQ:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_16;
        }
      }
        {if (true) return new Acceso(identificador,accesos,token.beginLine,token.beginColumn);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        identificador = jj_consume_token(IDENTIFICADOR).image;
        {if (true) return new Operacion(tipo_operacion.IDENTIFICADOR,identificador, token.beginLine, token.beginColumn);}
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(MENORIGUALQUE)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(MAYORIGUALQUE)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(MENORQUE)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(MAYORQUE)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(RELSE)) return true;
    if (jj_scan_token(LLIZQ)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(DISTINTOQUE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(RELSE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(IGUALQUE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(RIF)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(CIZQ)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(CDER)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(CIZQ)) return true;
    if (jj_scan_token(CIZQ)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(CDER)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(CDER)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PIZQ)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PDER)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(TERNARIO)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(CDER)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(CIZQ)) return true;
    if (jj_scan_token(COMA)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(CDER)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(CIZQ)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(CIZQ)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(RRETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(RRETURN)) return true;
    if (jj_scan_token(PIZQ)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PIZQ)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PDER)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(CIZQ)) return true;
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(CDER)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(PIZQ)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(PDER)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(CIZQ)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(COMA)) return true;
    if (jj_scan_token(CDER)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(CADENA)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(CIZQ)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(CIZQ)) return true;
    if (jj_scan_token(CIZQ)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(CDER)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(MENOS)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(CIZQ)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(CDER)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(POTENCIA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    if (jj_3R_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ASIG)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(ASIG)) return true;
    if (jj_scan_token(RFUNCTION)) return true;
    if (jj_scan_token(PIZQ)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PDER)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(POR)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(ASIG)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(ASIG)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(MENOS)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(MAS)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(ASIG)) return true;
    if (jj_scan_token(PIZQ)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PDER)) return true;
    if (jj_scan_token(ASG_FUNC)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[47];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x5458000,0x5458000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40007000,0x0,0x0,0x15d58000,0x15d58000,0x20000,0x0,0x0,0x80000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40007000,0x40007000,0x40007000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000000,0x8000000,0x8000000,0x4,0x2000,0x8000000,0x4,0x1,0x2000,0x2000,0x2000,0x2000,0x8205840,0x4,0x2000,0x8000000,0x8000000,0x0,0x4000000,0x2000,0x0,0x0,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x1000000,0x800000,0x400000,0x180000,0x180000,0x78000,0x78000,0x60,0x60,0x680,0x680,0x100,0x8205840,0x8005800,0x8205840,0x4,0x1,0x1,0x8000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[20];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 47; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 20; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
