/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
package analizadores;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int NUM = 12;
  /** RegularExpression Id. */
  int DECIMAL = 13;
  /** RegularExpression Id. */
  int CADENA = 14;
  /** RegularExpression Id. */
  int RPRINT = 15;
  /** RegularExpression Id. */
  int RIF = 16;
  /** RegularExpression Id. */
  int RELSE = 17;
  /** RegularExpression Id. */
  int RSWITCH = 18;
  /** RegularExpression Id. */
  int RCASE = 19;
  /** RegularExpression Id. */
  int RBREAK = 20;
  /** RegularExpression Id. */
  int RDEFAULT = 21;
  /** RegularExpression Id. */
  int RWHILE = 22;
  /** RegularExpression Id. */
  int RCONTINUE = 23;
  /** RegularExpression Id. */
  int RFOR = 24;
  /** RegularExpression Id. */
  int RIN = 25;
  /** RegularExpression Id. */
  int RDO = 26;
  /** RegularExpression Id. */
  int RFUNCTION = 27;
  /** RegularExpression Id. */
  int RRETURN = 28;
  /** RegularExpression Id. */
  int ASG_FUNC = 29;
  /** RegularExpression Id. */
  int PIZQ = 30;
  /** RegularExpression Id. */
  int PDER = 31;
  /** RegularExpression Id. */
  int CIZQ = 32;
  /** RegularExpression Id. */
  int CDER = 33;
  /** RegularExpression Id. */
  int COMA = 34;
  /** RegularExpression Id. */
  int LLIZQ = 35;
  /** RegularExpression Id. */
  int LLDER = 36;
  /** RegularExpression Id. */
  int MAS = 37;
  /** RegularExpression Id. */
  int MENOS = 38;
  /** RegularExpression Id. */
  int POR = 39;
  /** RegularExpression Id. */
  int POTENCIA = 40;
  /** RegularExpression Id. */
  int DIV = 41;
  /** RegularExpression Id. */
  int MODULO = 42;
  /** RegularExpression Id. */
  int TRUE = 43;
  /** RegularExpression Id. */
  int FALSE = 44;
  /** RegularExpression Id. */
  int PUNTOCOMA = 45;
  /** RegularExpression Id. */
  int NULL = 46;
  /** RegularExpression Id. */
  int MAYORQUE = 47;
  /** RegularExpression Id. */
  int MENORQUE = 48;
  /** RegularExpression Id. */
  int MAYORIGUALQUE = 49;
  /** RegularExpression Id. */
  int MENORIGUALQUE = 50;
  /** RegularExpression Id. */
  int IGUALQUE = 51;
  /** RegularExpression Id. */
  int DISTINTOQUE = 52;
  /** RegularExpression Id. */
  int NOT = 53;
  /** RegularExpression Id. */
  int AND = 54;
  /** RegularExpression Id. */
  int OR = 55;
  /** RegularExpression Id. */
  int TERNARIO = 56;
  /** RegularExpression Id. */
  int DOSPUNTOS = 57;
  /** RegularExpression Id. */
  int ASIG = 58;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 59;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"#\"",
    "<token of kind 6>",
    "\"#*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*#\"",
    "\"*#\"",
    "<token of kind 11>",
    "<NUM>",
    "<DECIMAL>",
    "<CADENA>",
    "\"print\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"case\"",
    "\"break\"",
    "\"default\"",
    "\"while\"",
    "\"continue\"",
    "\"for\"",
    "\"in\"",
    "\"do\"",
    "\"function\"",
    "\"return\"",
    "\"=>\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"^\"",
    "\"/\"",
    "\"%%\"",
    "\"true\"",
    "\"false\"",
    "\";\"",
    "\"null\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"?\"",
    "\":\"",
    "\"=\"",
    "<IDENTIFICADOR>",
  };

}
